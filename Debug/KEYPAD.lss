
KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000024f4  00002568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001b60  00000000  00000000  00002598  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a7a  00000000  00000000  000040f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00004e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007956  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008864  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008af1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  000092bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 25 10 	call	0x204a	; 0x204a <main>
      7a:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e6       	ldi	r26, 0x66	; 102
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 41 12 	jmp	0x2482	; 0x2482 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e6       	ldi	r24, 0x66	; 102
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 4d 12 	jmp	0x249a	; 0x249a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 51 12 	jmp	0x24a2	; 0x24a2 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <DIO_setPinDirection>:
#include "DIO_Reg.h"
#include "DIO_interface.h"

/*Set pin direction INPUT or OUTPUT*/
uint8 DIO_setPinDirection(uint8 copy_port ,uint8 copy_pin ,uint8 copy_direction )
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	28 97       	sbiw	r28, 0x08	; 8
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8a 83       	std	Y+2, r24	; 0x02
     b4c:	6b 83       	std	Y+3, r22	; 0x03
     b4e:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorStatus=0;
     b50:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pin <= PIN7)
     b52:	8b 81       	ldd	r24, Y+3	; 0x03
     b54:	88 30       	cpi	r24, 0x08	; 8
     b56:	08 f0       	brcs	.+2      	; 0xb5a <DIO_setPinDirection+0x24>
     b58:	f1 c0       	rjmp	.+482    	; 0xd3c <DIO_setPinDirection+0x206>
	{
		if(copy_direction == OUTPUT)
     b5a:	8c 81       	ldd	r24, Y+4	; 0x04
     b5c:	81 30       	cpi	r24, 0x01	; 1
     b5e:	09 f0       	breq	.+2      	; 0xb62 <DIO_setPinDirection+0x2c>
     b60:	72 c0       	rjmp	.+228    	; 0xc46 <DIO_setPinDirection+0x110>
		{
			switch(copy_port)
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	28 2f       	mov	r18, r24
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	38 87       	std	Y+8, r19	; 0x08
     b6a:	2f 83       	std	Y+7, r18	; 0x07
     b6c:	8f 81       	ldd	r24, Y+7	; 0x07
     b6e:	98 85       	ldd	r25, Y+8	; 0x08
     b70:	81 30       	cpi	r24, 0x01	; 1
     b72:	91 05       	cpc	r25, r1
     b74:	49 f1       	breq	.+82     	; 0xbc8 <DIO_setPinDirection+0x92>
     b76:	2f 81       	ldd	r18, Y+7	; 0x07
     b78:	38 85       	ldd	r19, Y+8	; 0x08
     b7a:	22 30       	cpi	r18, 0x02	; 2
     b7c:	31 05       	cpc	r19, r1
     b7e:	2c f4       	brge	.+10     	; 0xb8a <DIO_setPinDirection+0x54>
     b80:	8f 81       	ldd	r24, Y+7	; 0x07
     b82:	98 85       	ldd	r25, Y+8	; 0x08
     b84:	00 97       	sbiw	r24, 0x00	; 0
     b86:	61 f0       	breq	.+24     	; 0xba0 <DIO_setPinDirection+0x6a>
     b88:	5b c0       	rjmp	.+182    	; 0xc40 <DIO_setPinDirection+0x10a>
     b8a:	2f 81       	ldd	r18, Y+7	; 0x07
     b8c:	38 85       	ldd	r19, Y+8	; 0x08
     b8e:	22 30       	cpi	r18, 0x02	; 2
     b90:	31 05       	cpc	r19, r1
     b92:	71 f1       	breq	.+92     	; 0xbf0 <DIO_setPinDirection+0xba>
     b94:	8f 81       	ldd	r24, Y+7	; 0x07
     b96:	98 85       	ldd	r25, Y+8	; 0x08
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	91 05       	cpc	r25, r1
     b9c:	e9 f1       	breq	.+122    	; 0xc18 <DIO_setPinDirection+0xe2>
     b9e:	50 c0       	rjmp	.+160    	; 0xc40 <DIO_setPinDirection+0x10a>
	       {
				case DIO_PORTA: SET_BIT(DDRA ,copy_pin); break;
     ba0:	aa e3       	ldi	r26, 0x3A	; 58
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	ea e3       	ldi	r30, 0x3A	; 58
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	48 2f       	mov	r20, r24
     bac:	8b 81       	ldd	r24, Y+3	; 0x03
     bae:	28 2f       	mov	r18, r24
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	02 2e       	mov	r0, r18
     bb8:	02 c0       	rjmp	.+4      	; 0xbbe <DIO_setPinDirection+0x88>
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	0a 94       	dec	r0
     bc0:	e2 f7       	brpl	.-8      	; 0xbba <DIO_setPinDirection+0x84>
     bc2:	84 2b       	or	r24, r20
     bc4:	8c 93       	st	X, r24
     bc6:	bc c0       	rjmp	.+376    	; 0xd40 <DIO_setPinDirection+0x20a>
				case DIO_PORTB: SET_BIT(DDRB ,copy_pin);break;
     bc8:	a7 e3       	ldi	r26, 0x37	; 55
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	e7 e3       	ldi	r30, 0x37	; 55
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	48 2f       	mov	r20, r24
     bd4:	8b 81       	ldd	r24, Y+3	; 0x03
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	02 2e       	mov	r0, r18
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <DIO_setPinDirection+0xb0>
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	0a 94       	dec	r0
     be8:	e2 f7       	brpl	.-8      	; 0xbe2 <DIO_setPinDirection+0xac>
     bea:	84 2b       	or	r24, r20
     bec:	8c 93       	st	X, r24
     bee:	a8 c0       	rjmp	.+336    	; 0xd40 <DIO_setPinDirection+0x20a>
				case DIO_PORTC: SET_BIT(DDRC ,copy_pin);break;
     bf0:	a4 e3       	ldi	r26, 0x34	; 52
     bf2:	b0 e0       	ldi	r27, 0x00	; 0
     bf4:	e4 e3       	ldi	r30, 0x34	; 52
     bf6:	f0 e0       	ldi	r31, 0x00	; 0
     bf8:	80 81       	ld	r24, Z
     bfa:	48 2f       	mov	r20, r24
     bfc:	8b 81       	ldd	r24, Y+3	; 0x03
     bfe:	28 2f       	mov	r18, r24
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	02 2e       	mov	r0, r18
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <DIO_setPinDirection+0xd8>
     c0a:	88 0f       	add	r24, r24
     c0c:	99 1f       	adc	r25, r25
     c0e:	0a 94       	dec	r0
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <DIO_setPinDirection+0xd4>
     c12:	84 2b       	or	r24, r20
     c14:	8c 93       	st	X, r24
     c16:	94 c0       	rjmp	.+296    	; 0xd40 <DIO_setPinDirection+0x20a>
                case DIO_PORTD: SET_BIT(DDRD ,copy_pin);break;
     c18:	a1 e3       	ldi	r26, 0x31	; 49
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e1 e3       	ldi	r30, 0x31	; 49
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	48 2f       	mov	r20, r24
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 2e       	mov	r0, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <DIO_setPinDirection+0x100>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <DIO_setPinDirection+0xfc>
     c3a:	84 2b       	or	r24, r20
     c3c:	8c 93       	st	X, r24
     c3e:	80 c0       	rjmp	.+256    	; 0xd40 <DIO_setPinDirection+0x20a>
                default:local_errorStatus=1;break;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	89 83       	std	Y+1, r24	; 0x01
     c44:	7d c0       	rjmp	.+250    	; 0xd40 <DIO_setPinDirection+0x20a>
	       }
		}
		else if(copy_direction ==INPUT)
     c46:	8c 81       	ldd	r24, Y+4	; 0x04
     c48:	88 23       	and	r24, r24
     c4a:	09 f0       	breq	.+2      	; 0xc4e <DIO_setPinDirection+0x118>
     c4c:	79 c0       	rjmp	.+242    	; 0xd40 <DIO_setPinDirection+0x20a>
		{
                switch(copy_port)
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
     c50:	28 2f       	mov	r18, r24
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	3e 83       	std	Y+6, r19	; 0x06
     c56:	2d 83       	std	Y+5, r18	; 0x05
     c58:	8d 81       	ldd	r24, Y+5	; 0x05
     c5a:	9e 81       	ldd	r25, Y+6	; 0x06
     c5c:	81 30       	cpi	r24, 0x01	; 1
     c5e:	91 05       	cpc	r25, r1
     c60:	59 f1       	breq	.+86     	; 0xcb8 <DIO_setPinDirection+0x182>
     c62:	2d 81       	ldd	r18, Y+5	; 0x05
     c64:	3e 81       	ldd	r19, Y+6	; 0x06
     c66:	22 30       	cpi	r18, 0x02	; 2
     c68:	31 05       	cpc	r19, r1
     c6a:	2c f4       	brge	.+10     	; 0xc76 <DIO_setPinDirection+0x140>
     c6c:	8d 81       	ldd	r24, Y+5	; 0x05
     c6e:	9e 81       	ldd	r25, Y+6	; 0x06
     c70:	00 97       	sbiw	r24, 0x00	; 0
     c72:	69 f0       	breq	.+26     	; 0xc8e <DIO_setPinDirection+0x158>
     c74:	60 c0       	rjmp	.+192    	; 0xd36 <DIO_setPinDirection+0x200>
     c76:	2d 81       	ldd	r18, Y+5	; 0x05
     c78:	3e 81       	ldd	r19, Y+6	; 0x06
     c7a:	22 30       	cpi	r18, 0x02	; 2
     c7c:	31 05       	cpc	r19, r1
     c7e:	89 f1       	breq	.+98     	; 0xce2 <DIO_setPinDirection+0x1ac>
     c80:	8d 81       	ldd	r24, Y+5	; 0x05
     c82:	9e 81       	ldd	r25, Y+6	; 0x06
     c84:	83 30       	cpi	r24, 0x03	; 3
     c86:	91 05       	cpc	r25, r1
     c88:	09 f4       	brne	.+2      	; 0xc8c <DIO_setPinDirection+0x156>
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <DIO_setPinDirection+0x1d6>
     c8c:	54 c0       	rjmp	.+168    	; 0xd36 <DIO_setPinDirection+0x200>
                {
					case DIO_PORTA: CLR_BIT(DDRA ,copy_pin);break;
     c8e:	aa e3       	ldi	r26, 0x3A	; 58
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ea e3       	ldi	r30, 0x3A	; 58
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_setPinDirection+0x176>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_setPinDirection+0x172>
     cb0:	80 95       	com	r24
     cb2:	84 23       	and	r24, r20
     cb4:	8c 93       	st	X, r24
     cb6:	44 c0       	rjmp	.+136    	; 0xd40 <DIO_setPinDirection+0x20a>
					case DIO_PORTB: CLR_BIT(DDRB ,copy_pin);break;
     cb8:	a7 e3       	ldi	r26, 0x37	; 55
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e7 e3       	ldi	r30, 0x37	; 55
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	28 2f       	mov	r18, r24
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	02 2e       	mov	r0, r18
     cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <DIO_setPinDirection+0x1a0>
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	0a 94       	dec	r0
     cd8:	e2 f7       	brpl	.-8      	; 0xcd2 <DIO_setPinDirection+0x19c>
     cda:	80 95       	com	r24
     cdc:	84 23       	and	r24, r20
     cde:	8c 93       	st	X, r24
     ce0:	2f c0       	rjmp	.+94     	; 0xd40 <DIO_setPinDirection+0x20a>
					case DIO_PORTC: CLR_BIT(DDRC ,copy_pin);break;
     ce2:	a4 e3       	ldi	r26, 0x34	; 52
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	e4 e3       	ldi	r30, 0x34	; 52
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	48 2f       	mov	r20, r24
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
     cf0:	28 2f       	mov	r18, r24
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	02 2e       	mov	r0, r18
     cfa:	02 c0       	rjmp	.+4      	; 0xd00 <DIO_setPinDirection+0x1ca>
     cfc:	88 0f       	add	r24, r24
     cfe:	99 1f       	adc	r25, r25
     d00:	0a 94       	dec	r0
     d02:	e2 f7       	brpl	.-8      	; 0xcfc <DIO_setPinDirection+0x1c6>
     d04:	80 95       	com	r24
     d06:	84 23       	and	r24, r20
     d08:	8c 93       	st	X, r24
     d0a:	1a c0       	rjmp	.+52     	; 0xd40 <DIO_setPinDirection+0x20a>
					case DIO_PORTD: CLR_BIT(DDRD ,copy_pin);break;
     d0c:	a1 e3       	ldi	r26, 0x31	; 49
     d0e:	b0 e0       	ldi	r27, 0x00	; 0
     d10:	e1 e3       	ldi	r30, 0x31	; 49
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	48 2f       	mov	r20, r24
     d18:	8b 81       	ldd	r24, Y+3	; 0x03
     d1a:	28 2f       	mov	r18, r24
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	02 2e       	mov	r0, r18
     d24:	02 c0       	rjmp	.+4      	; 0xd2a <DIO_setPinDirection+0x1f4>
     d26:	88 0f       	add	r24, r24
     d28:	99 1f       	adc	r25, r25
     d2a:	0a 94       	dec	r0
     d2c:	e2 f7       	brpl	.-8      	; 0xd26 <DIO_setPinDirection+0x1f0>
     d2e:	80 95       	com	r24
     d30:	84 23       	and	r24, r20
     d32:	8c 93       	st	X, r24
     d34:	05 c0       	rjmp	.+10     	; 0xd40 <DIO_setPinDirection+0x20a>
					default:local_errorStatus=1;break;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	89 83       	std	Y+1, r24	; 0x01
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <DIO_setPinDirection+0x20a>
                }
		}
	}
	else
	{
		local_errorStatus=1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_errorStatus;
     d40:	89 81       	ldd	r24, Y+1	; 0x01
}
     d42:	28 96       	adiw	r28, 0x08	; 8
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	de bf       	out	0x3e, r29	; 62
     d4a:	0f be       	out	0x3f, r0	; 63
     d4c:	cd bf       	out	0x3d, r28	; 61
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <DIO_setPinValue>:

/*Set pin Value LOW or HIGH*/
uint8 DIO_setPinValue(uint8 copy_port,uint8 copy_pin,uint8 copy_val)
{
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	28 97       	sbiw	r28, 0x08	; 8
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
     d68:	8a 83       	std	Y+2, r24	; 0x02
     d6a:	6b 83       	std	Y+3, r22	; 0x03
     d6c:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorStatus=0;
     d6e:	19 82       	std	Y+1, r1	; 0x01
		if(copy_pin <= PIN7)
     d70:	8b 81       	ldd	r24, Y+3	; 0x03
     d72:	88 30       	cpi	r24, 0x08	; 8
     d74:	08 f0       	brcs	.+2      	; 0xd78 <DIO_setPinValue+0x24>
     d76:	f3 c0       	rjmp	.+486    	; 0xf5e <DIO_setPinValue+0x20a>
		{
			if(copy_val == HIGH)
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	81 30       	cpi	r24, 0x01	; 1
     d7c:	09 f0       	breq	.+2      	; 0xd80 <DIO_setPinValue+0x2c>
     d7e:	72 c0       	rjmp	.+228    	; 0xe64 <DIO_setPinValue+0x110>
			{
				switch(copy_port)
     d80:	8a 81       	ldd	r24, Y+2	; 0x02
     d82:	28 2f       	mov	r18, r24
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	38 87       	std	Y+8, r19	; 0x08
     d88:	2f 83       	std	Y+7, r18	; 0x07
     d8a:	8f 81       	ldd	r24, Y+7	; 0x07
     d8c:	98 85       	ldd	r25, Y+8	; 0x08
     d8e:	81 30       	cpi	r24, 0x01	; 1
     d90:	91 05       	cpc	r25, r1
     d92:	49 f1       	breq	.+82     	; 0xde6 <DIO_setPinValue+0x92>
     d94:	2f 81       	ldd	r18, Y+7	; 0x07
     d96:	38 85       	ldd	r19, Y+8	; 0x08
     d98:	22 30       	cpi	r18, 0x02	; 2
     d9a:	31 05       	cpc	r19, r1
     d9c:	2c f4       	brge	.+10     	; 0xda8 <DIO_setPinValue+0x54>
     d9e:	8f 81       	ldd	r24, Y+7	; 0x07
     da0:	98 85       	ldd	r25, Y+8	; 0x08
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	61 f0       	breq	.+24     	; 0xdbe <DIO_setPinValue+0x6a>
     da6:	5b c0       	rjmp	.+182    	; 0xe5e <DIO_setPinValue+0x10a>
     da8:	2f 81       	ldd	r18, Y+7	; 0x07
     daa:	38 85       	ldd	r19, Y+8	; 0x08
     dac:	22 30       	cpi	r18, 0x02	; 2
     dae:	31 05       	cpc	r19, r1
     db0:	71 f1       	breq	.+92     	; 0xe0e <DIO_setPinValue+0xba>
     db2:	8f 81       	ldd	r24, Y+7	; 0x07
     db4:	98 85       	ldd	r25, Y+8	; 0x08
     db6:	83 30       	cpi	r24, 0x03	; 3
     db8:	91 05       	cpc	r25, r1
     dba:	e9 f1       	breq	.+122    	; 0xe36 <DIO_setPinValue+0xe2>
     dbc:	50 c0       	rjmp	.+160    	; 0xe5e <DIO_setPinValue+0x10a>
				       {
							case DIO_PORTA: SET_BIT(PORTA ,copy_pin);break;
     dbe:	ab e3       	ldi	r26, 0x3B	; 59
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	eb e3       	ldi	r30, 0x3B	; 59
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8b 81       	ldd	r24, Y+3	; 0x03
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_setPinValue+0x88>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_setPinValue+0x84>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	bc c0       	rjmp	.+376    	; 0xf5e <DIO_setPinValue+0x20a>
							case DIO_PORTB: SET_BIT(PORTB ,copy_pin);break;
     de6:	a8 e3       	ldi	r26, 0x38	; 56
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e8 e3       	ldi	r30, 0x38	; 56
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8b 81       	ldd	r24, Y+3	; 0x03
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_setPinValue+0xb0>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_setPinValue+0xac>
     e08:	84 2b       	or	r24, r20
     e0a:	8c 93       	st	X, r24
     e0c:	a8 c0       	rjmp	.+336    	; 0xf5e <DIO_setPinValue+0x20a>
							case DIO_PORTC: SET_BIT(PORTC ,copy_pin);break;
     e0e:	a5 e3       	ldi	r26, 0x35	; 53
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e5 e3       	ldi	r30, 0x35	; 53
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	48 2f       	mov	r20, r24
     e1a:	8b 81       	ldd	r24, Y+3	; 0x03
     e1c:	28 2f       	mov	r18, r24
     e1e:	30 e0       	ldi	r19, 0x00	; 0
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	02 2e       	mov	r0, r18
     e26:	02 c0       	rjmp	.+4      	; 0xe2c <DIO_setPinValue+0xd8>
     e28:	88 0f       	add	r24, r24
     e2a:	99 1f       	adc	r25, r25
     e2c:	0a 94       	dec	r0
     e2e:	e2 f7       	brpl	.-8      	; 0xe28 <DIO_setPinValue+0xd4>
     e30:	84 2b       	or	r24, r20
     e32:	8c 93       	st	X, r24
     e34:	94 c0       	rjmp	.+296    	; 0xf5e <DIO_setPinValue+0x20a>
			                case DIO_PORTD: SET_BIT(PORTD ,copy_pin);break;
     e36:	a2 e3       	ldi	r26, 0x32	; 50
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e2 e3       	ldi	r30, 0x32	; 50
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	48 2f       	mov	r20, r24
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	28 2f       	mov	r18, r24
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	81 e0       	ldi	r24, 0x01	; 1
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	02 2e       	mov	r0, r18
     e4e:	02 c0       	rjmp	.+4      	; 0xe54 <DIO_setPinValue+0x100>
     e50:	88 0f       	add	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	0a 94       	dec	r0
     e56:	e2 f7       	brpl	.-8      	; 0xe50 <DIO_setPinValue+0xfc>
     e58:	84 2b       	or	r24, r20
     e5a:	8c 93       	st	X, r24
     e5c:	80 c0       	rjmp	.+256    	; 0xf5e <DIO_setPinValue+0x20a>
			                default:local_errorStatus=1;break;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	7d c0       	rjmp	.+250    	; 0xf5e <DIO_setPinValue+0x20a>
				       }
			}
			else if(copy_val == LOW)
     e64:	8c 81       	ldd	r24, Y+4	; 0x04
     e66:	88 23       	and	r24, r24
     e68:	09 f0       	breq	.+2      	; 0xe6c <DIO_setPinValue+0x118>
     e6a:	77 c0       	rjmp	.+238    	; 0xf5a <DIO_setPinValue+0x206>
			{
			    switch(copy_port)
     e6c:	8a 81       	ldd	r24, Y+2	; 0x02
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	3e 83       	std	Y+6, r19	; 0x06
     e74:	2d 83       	std	Y+5, r18	; 0x05
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	9e 81       	ldd	r25, Y+6	; 0x06
     e7a:	81 30       	cpi	r24, 0x01	; 1
     e7c:	91 05       	cpc	r25, r1
     e7e:	59 f1       	breq	.+86     	; 0xed6 <DIO_setPinValue+0x182>
     e80:	2d 81       	ldd	r18, Y+5	; 0x05
     e82:	3e 81       	ldd	r19, Y+6	; 0x06
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	2c f4       	brge	.+10     	; 0xe94 <DIO_setPinValue+0x140>
     e8a:	8d 81       	ldd	r24, Y+5	; 0x05
     e8c:	9e 81       	ldd	r25, Y+6	; 0x06
     e8e:	00 97       	sbiw	r24, 0x00	; 0
     e90:	69 f0       	breq	.+26     	; 0xeac <DIO_setPinValue+0x158>
     e92:	60 c0       	rjmp	.+192    	; 0xf54 <DIO_setPinValue+0x200>
     e94:	2d 81       	ldd	r18, Y+5	; 0x05
     e96:	3e 81       	ldd	r19, Y+6	; 0x06
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	31 05       	cpc	r19, r1
     e9c:	89 f1       	breq	.+98     	; 0xf00 <DIO_setPinValue+0x1ac>
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	83 30       	cpi	r24, 0x03	; 3
     ea4:	91 05       	cpc	r25, r1
     ea6:	09 f4       	brne	.+2      	; 0xeaa <DIO_setPinValue+0x156>
     ea8:	40 c0       	rjmp	.+128    	; 0xf2a <DIO_setPinValue+0x1d6>
     eaa:	54 c0       	rjmp	.+168    	; 0xf54 <DIO_setPinValue+0x200>
			                {
								case DIO_PORTA: CLR_BIT(PORTA ,copy_pin);break;
     eac:	ab e3       	ldi	r26, 0x3B	; 59
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	eb e3       	ldi	r30, 0x3B	; 59
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	80 81       	ld	r24, Z
     eb6:	48 2f       	mov	r20, r24
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	02 2e       	mov	r0, r18
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <DIO_setPinValue+0x176>
     ec6:	88 0f       	add	r24, r24
     ec8:	99 1f       	adc	r25, r25
     eca:	0a 94       	dec	r0
     ecc:	e2 f7       	brpl	.-8      	; 0xec6 <DIO_setPinValue+0x172>
     ece:	80 95       	com	r24
     ed0:	84 23       	and	r24, r20
     ed2:	8c 93       	st	X, r24
     ed4:	44 c0       	rjmp	.+136    	; 0xf5e <DIO_setPinValue+0x20a>
								case DIO_PORTB: CLR_BIT(PORTB ,copy_pin);break;
     ed6:	a8 e3       	ldi	r26, 0x38	; 56
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e8 e3       	ldi	r30, 0x38	; 56
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <DIO_setPinValue+0x1a0>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <DIO_setPinValue+0x19c>
     ef8:	80 95       	com	r24
     efa:	84 23       	and	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	2f c0       	rjmp	.+94     	; 0xf5e <DIO_setPinValue+0x20a>
								case DIO_PORTC: CLR_BIT(PORTC ,copy_pin);break;
     f00:	a5 e3       	ldi	r26, 0x35	; 53
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e3       	ldi	r30, 0x35	; 53
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_setPinValue+0x1ca>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_setPinValue+0x1c6>
     f22:	80 95       	com	r24
     f24:	84 23       	and	r24, r20
     f26:	8c 93       	st	X, r24
     f28:	1a c0       	rjmp	.+52     	; 0xf5e <DIO_setPinValue+0x20a>
								case DIO_PORTD: CLR_BIT(PORTD ,copy_pin);break;
     f2a:	a2 e3       	ldi	r26, 0x32	; 50
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	e2 e3       	ldi	r30, 0x32	; 50
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	80 81       	ld	r24, Z
     f34:	48 2f       	mov	r20, r24
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	28 2f       	mov	r18, r24
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	02 2e       	mov	r0, r18
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <DIO_setPinValue+0x1f4>
     f44:	88 0f       	add	r24, r24
     f46:	99 1f       	adc	r25, r25
     f48:	0a 94       	dec	r0
     f4a:	e2 f7       	brpl	.-8      	; 0xf44 <DIO_setPinValue+0x1f0>
     f4c:	80 95       	com	r24
     f4e:	84 23       	and	r24, r20
     f50:	8c 93       	st	X, r24
     f52:	05 c0       	rjmp	.+10     	; 0xf5e <DIO_setPinValue+0x20a>
								default:local_errorStatus=1;break;
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <DIO_setPinValue+0x20a>
			                }
			}
			else
			{
				local_errorStatus=1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		return local_errorStatus;
     f5e:	89 81       	ldd	r24, Y+1	; 0x01

}
     f60:	28 96       	adiw	r28, 0x08	; 8
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	f8 94       	cli
     f66:	de bf       	out	0x3e, r29	; 62
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	cd bf       	out	0x3d, r28	; 61
     f6c:	cf 91       	pop	r28
     f6e:	df 91       	pop	r29
     f70:	08 95       	ret

00000f72 <DIO_setPortDirection>:
/*This Function Set PORT value to be INPUT or OUTPUT*/
uint8 DIO_setPortDirection(uint8 copy_port,uint8 copy_direction)
{
     f72:	df 93       	push	r29
     f74:	cf 93       	push	r28
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	27 97       	sbiw	r28, 0x07	; 7
     f7c:	0f b6       	in	r0, 0x3f	; 63
     f7e:	f8 94       	cli
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	0f be       	out	0x3f, r0	; 63
     f84:	cd bf       	out	0x3d, r28	; 61
     f86:	8a 83       	std	Y+2, r24	; 0x02
     f88:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorStatus=0;
     f8a:	19 82       	std	Y+1, r1	; 0x01
	if(copy_direction== OUTPUT)
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	b1 f5       	brne	.+108    	; 0xffe <DIO_setPortDirection+0x8c>
	{
		switch(copy_port)
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	28 2f       	mov	r18, r24
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	3f 83       	std	Y+7, r19	; 0x07
     f9a:	2e 83       	std	Y+6, r18	; 0x06
     f9c:	8e 81       	ldd	r24, Y+6	; 0x06
     f9e:	9f 81       	ldd	r25, Y+7	; 0x07
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	91 05       	cpc	r25, r1
     fa4:	d1 f0       	breq	.+52     	; 0xfda <DIO_setPortDirection+0x68>
     fa6:	2e 81       	ldd	r18, Y+6	; 0x06
     fa8:	3f 81       	ldd	r19, Y+7	; 0x07
     faa:	22 30       	cpi	r18, 0x02	; 2
     fac:	31 05       	cpc	r19, r1
     fae:	2c f4       	brge	.+10     	; 0xfba <DIO_setPortDirection+0x48>
     fb0:	8e 81       	ldd	r24, Y+6	; 0x06
     fb2:	9f 81       	ldd	r25, Y+7	; 0x07
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	61 f0       	breq	.+24     	; 0xfd0 <DIO_setPortDirection+0x5e>
     fb8:	1f c0       	rjmp	.+62     	; 0xff8 <DIO_setPortDirection+0x86>
     fba:	2e 81       	ldd	r18, Y+6	; 0x06
     fbc:	3f 81       	ldd	r19, Y+7	; 0x07
     fbe:	22 30       	cpi	r18, 0x02	; 2
     fc0:	31 05       	cpc	r19, r1
     fc2:	81 f0       	breq	.+32     	; 0xfe4 <DIO_setPortDirection+0x72>
     fc4:	8e 81       	ldd	r24, Y+6	; 0x06
     fc6:	9f 81       	ldd	r25, Y+7	; 0x07
     fc8:	83 30       	cpi	r24, 0x03	; 3
     fca:	91 05       	cpc	r25, r1
     fcc:	81 f0       	breq	.+32     	; 0xfee <DIO_setPortDirection+0x7c>
     fce:	14 c0       	rjmp	.+40     	; 0xff8 <DIO_setPortDirection+0x86>
		{
		case DIO_PORTA:DDRA =0xff;break;
     fd0:	ea e3       	ldi	r30, 0x3A	; 58
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	80 83       	st	Z, r24
     fd8:	49 c0       	rjmp	.+146    	; 0x106c <DIO_setPortDirection+0xfa>
		case DIO_PORTB:DDRB =0xff;break;
     fda:	e7 e3       	ldi	r30, 0x37	; 55
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	8f ef       	ldi	r24, 0xFF	; 255
     fe0:	80 83       	st	Z, r24
     fe2:	44 c0       	rjmp	.+136    	; 0x106c <DIO_setPortDirection+0xfa>
		case DIO_PORTC:DDRC =0xff;break;
     fe4:	e4 e3       	ldi	r30, 0x34	; 52
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	8f ef       	ldi	r24, 0xFF	; 255
     fea:	80 83       	st	Z, r24
     fec:	3f c0       	rjmp	.+126    	; 0x106c <DIO_setPortDirection+0xfa>
		case DIO_PORTD:DDRD =0xff;break;
     fee:	e1 e3       	ldi	r30, 0x31	; 49
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	8f ef       	ldi	r24, 0xFF	; 255
     ff4:	80 83       	st	Z, r24
     ff6:	3a c0       	rjmp	.+116    	; 0x106c <DIO_setPortDirection+0xfa>
		default:local_errorStatus=1;break;
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	37 c0       	rjmp	.+110    	; 0x106c <DIO_setPortDirection+0xfa>
		}
	}
	else if(copy_direction ==INPUT)
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	88 23       	and	r24, r24
    1002:	91 f5       	brne	.+100    	; 0x1068 <DIO_setPortDirection+0xf6>
	{
		switch(copy_port)
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	3d 83       	std	Y+5, r19	; 0x05
    100c:	2c 83       	std	Y+4, r18	; 0x04
    100e:	8c 81       	ldd	r24, Y+4	; 0x04
    1010:	9d 81       	ldd	r25, Y+5	; 0x05
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	91 05       	cpc	r25, r1
    1016:	c9 f0       	breq	.+50     	; 0x104a <DIO_setPortDirection+0xd8>
    1018:	2c 81       	ldd	r18, Y+4	; 0x04
    101a:	3d 81       	ldd	r19, Y+5	; 0x05
    101c:	22 30       	cpi	r18, 0x02	; 2
    101e:	31 05       	cpc	r19, r1
    1020:	2c f4       	brge	.+10     	; 0x102c <DIO_setPortDirection+0xba>
    1022:	8c 81       	ldd	r24, Y+4	; 0x04
    1024:	9d 81       	ldd	r25, Y+5	; 0x05
    1026:	00 97       	sbiw	r24, 0x00	; 0
    1028:	61 f0       	breq	.+24     	; 0x1042 <DIO_setPortDirection+0xd0>
    102a:	1b c0       	rjmp	.+54     	; 0x1062 <DIO_setPortDirection+0xf0>
    102c:	2c 81       	ldd	r18, Y+4	; 0x04
    102e:	3d 81       	ldd	r19, Y+5	; 0x05
    1030:	22 30       	cpi	r18, 0x02	; 2
    1032:	31 05       	cpc	r19, r1
    1034:	71 f0       	breq	.+28     	; 0x1052 <DIO_setPortDirection+0xe0>
    1036:	8c 81       	ldd	r24, Y+4	; 0x04
    1038:	9d 81       	ldd	r25, Y+5	; 0x05
    103a:	83 30       	cpi	r24, 0x03	; 3
    103c:	91 05       	cpc	r25, r1
    103e:	69 f0       	breq	.+26     	; 0x105a <DIO_setPortDirection+0xe8>
    1040:	10 c0       	rjmp	.+32     	; 0x1062 <DIO_setPortDirection+0xf0>
			{
			case DIO_PORTA:DDRA =0x00;break;
    1042:	ea e3       	ldi	r30, 0x3A	; 58
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	10 82       	st	Z, r1
    1048:	11 c0       	rjmp	.+34     	; 0x106c <DIO_setPortDirection+0xfa>
			case DIO_PORTB:DDRB =0x00;break;
    104a:	e7 e3       	ldi	r30, 0x37	; 55
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	10 82       	st	Z, r1
    1050:	0d c0       	rjmp	.+26     	; 0x106c <DIO_setPortDirection+0xfa>
			case DIO_PORTC:DDRC =0x00;break;
    1052:	e4 e3       	ldi	r30, 0x34	; 52
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	10 82       	st	Z, r1
    1058:	09 c0       	rjmp	.+18     	; 0x106c <DIO_setPortDirection+0xfa>
			case DIO_PORTD:DDRD =0x00;break;
    105a:	e1 e3       	ldi	r30, 0x31	; 49
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	10 82       	st	Z, r1
    1060:	05 c0       	rjmp	.+10     	; 0x106c <DIO_setPortDirection+0xfa>
			default:local_errorStatus=1;break;
    1062:	81 e0       	ldi	r24, 0x01	; 1
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	02 c0       	rjmp	.+4      	; 0x106c <DIO_setPortDirection+0xfa>
			}
	}
	else
	{
		local_errorStatus=1;
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorStatus;
    106c:	89 81       	ldd	r24, Y+1	; 0x01
}
    106e:	27 96       	adiw	r28, 0x07	; 7
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	f8 94       	cli
    1074:	de bf       	out	0x3e, r29	; 62
    1076:	0f be       	out	0x3f, r0	; 63
    1078:	cd bf       	out	0x3d, r28	; 61
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <DIO_uint8_setPortValue>:
/*This Function Set PORT value to HIGH or LOW*/
uint8 DIO_uint8_setPortValue(uint8 copy_port,uint8 copy_val)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	27 97       	sbiw	r28, 0x07	; 7
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	8a 83       	std	Y+2, r24	; 0x02
    1096:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorStatus=0;
    1098:	19 82       	std	Y+1, r1	; 0x01
		if(copy_val== HIGH)
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	81 30       	cpi	r24, 0x01	; 1
    109e:	b1 f5       	brne	.+108    	; 0x110c <DIO_uint8_setPortValue+0x8c>
		{
			switch(copy_port)
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3f 83       	std	Y+7, r19	; 0x07
    10a8:	2e 83       	std	Y+6, r18	; 0x06
    10aa:	8e 81       	ldd	r24, Y+6	; 0x06
    10ac:	9f 81       	ldd	r25, Y+7	; 0x07
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	91 05       	cpc	r25, r1
    10b2:	d1 f0       	breq	.+52     	; 0x10e8 <DIO_uint8_setPortValue+0x68>
    10b4:	2e 81       	ldd	r18, Y+6	; 0x06
    10b6:	3f 81       	ldd	r19, Y+7	; 0x07
    10b8:	22 30       	cpi	r18, 0x02	; 2
    10ba:	31 05       	cpc	r19, r1
    10bc:	2c f4       	brge	.+10     	; 0x10c8 <DIO_uint8_setPortValue+0x48>
    10be:	8e 81       	ldd	r24, Y+6	; 0x06
    10c0:	9f 81       	ldd	r25, Y+7	; 0x07
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	61 f0       	breq	.+24     	; 0x10de <DIO_uint8_setPortValue+0x5e>
    10c6:	1f c0       	rjmp	.+62     	; 0x1106 <DIO_uint8_setPortValue+0x86>
    10c8:	2e 81       	ldd	r18, Y+6	; 0x06
    10ca:	3f 81       	ldd	r19, Y+7	; 0x07
    10cc:	22 30       	cpi	r18, 0x02	; 2
    10ce:	31 05       	cpc	r19, r1
    10d0:	81 f0       	breq	.+32     	; 0x10f2 <DIO_uint8_setPortValue+0x72>
    10d2:	8e 81       	ldd	r24, Y+6	; 0x06
    10d4:	9f 81       	ldd	r25, Y+7	; 0x07
    10d6:	83 30       	cpi	r24, 0x03	; 3
    10d8:	91 05       	cpc	r25, r1
    10da:	81 f0       	breq	.+32     	; 0x10fc <DIO_uint8_setPortValue+0x7c>
    10dc:	14 c0       	rjmp	.+40     	; 0x1106 <DIO_uint8_setPortValue+0x86>
			{
			case DIO_PORTA:PORTA =0xff;break;
    10de:	eb e3       	ldi	r30, 0x3B	; 59
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	8f ef       	ldi	r24, 0xFF	; 255
    10e4:	80 83       	st	Z, r24
    10e6:	49 c0       	rjmp	.+146    	; 0x117a <DIO_uint8_setPortValue+0xfa>
			case DIO_PORTB:PORTB =0xff;break;
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	8f ef       	ldi	r24, 0xFF	; 255
    10ee:	80 83       	st	Z, r24
    10f0:	44 c0       	rjmp	.+136    	; 0x117a <DIO_uint8_setPortValue+0xfa>
			case DIO_PORTC:PORTC =0xff;break;
    10f2:	e5 e3       	ldi	r30, 0x35	; 53
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	8f ef       	ldi	r24, 0xFF	; 255
    10f8:	80 83       	st	Z, r24
    10fa:	3f c0       	rjmp	.+126    	; 0x117a <DIO_uint8_setPortValue+0xfa>
			case DIO_PORTD:PORTD =0xff;break;
    10fc:	e2 e3       	ldi	r30, 0x32	; 50
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	8f ef       	ldi	r24, 0xFF	; 255
    1102:	80 83       	st	Z, r24
    1104:	3a c0       	rjmp	.+116    	; 0x117a <DIO_uint8_setPortValue+0xfa>
			default:local_errorStatus=1;break;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	89 83       	std	Y+1, r24	; 0x01
    110a:	37 c0       	rjmp	.+110    	; 0x117a <DIO_uint8_setPortValue+0xfa>
			}
		}
		else if(copy_val == LOW)
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	88 23       	and	r24, r24
    1110:	91 f5       	brne	.+100    	; 0x1176 <DIO_uint8_setPortValue+0xf6>
		{
			switch(copy_port)
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	28 2f       	mov	r18, r24
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	3d 83       	std	Y+5, r19	; 0x05
    111a:	2c 83       	std	Y+4, r18	; 0x04
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	9d 81       	ldd	r25, Y+5	; 0x05
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	91 05       	cpc	r25, r1
    1124:	c9 f0       	breq	.+50     	; 0x1158 <DIO_uint8_setPortValue+0xd8>
    1126:	2c 81       	ldd	r18, Y+4	; 0x04
    1128:	3d 81       	ldd	r19, Y+5	; 0x05
    112a:	22 30       	cpi	r18, 0x02	; 2
    112c:	31 05       	cpc	r19, r1
    112e:	2c f4       	brge	.+10     	; 0x113a <DIO_uint8_setPortValue+0xba>
    1130:	8c 81       	ldd	r24, Y+4	; 0x04
    1132:	9d 81       	ldd	r25, Y+5	; 0x05
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	61 f0       	breq	.+24     	; 0x1150 <DIO_uint8_setPortValue+0xd0>
    1138:	1b c0       	rjmp	.+54     	; 0x1170 <DIO_uint8_setPortValue+0xf0>
    113a:	2c 81       	ldd	r18, Y+4	; 0x04
    113c:	3d 81       	ldd	r19, Y+5	; 0x05
    113e:	22 30       	cpi	r18, 0x02	; 2
    1140:	31 05       	cpc	r19, r1
    1142:	71 f0       	breq	.+28     	; 0x1160 <DIO_uint8_setPortValue+0xe0>
    1144:	8c 81       	ldd	r24, Y+4	; 0x04
    1146:	9d 81       	ldd	r25, Y+5	; 0x05
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	91 05       	cpc	r25, r1
    114c:	69 f0       	breq	.+26     	; 0x1168 <DIO_uint8_setPortValue+0xe8>
    114e:	10 c0       	rjmp	.+32     	; 0x1170 <DIO_uint8_setPortValue+0xf0>
				{
				case DIO_PORTA:PORTA =0x00;break;
    1150:	eb e3       	ldi	r30, 0x3B	; 59
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	10 82       	st	Z, r1
    1156:	11 c0       	rjmp	.+34     	; 0x117a <DIO_uint8_setPortValue+0xfa>
				case DIO_PORTB:PORTB =0x00;break;
    1158:	e8 e3       	ldi	r30, 0x38	; 56
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	10 82       	st	Z, r1
    115e:	0d c0       	rjmp	.+26     	; 0x117a <DIO_uint8_setPortValue+0xfa>
				case DIO_PORTC:PORTC =0x00;break;
    1160:	e5 e3       	ldi	r30, 0x35	; 53
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	10 82       	st	Z, r1
    1166:	09 c0       	rjmp	.+18     	; 0x117a <DIO_uint8_setPortValue+0xfa>
				case DIO_PORTD:PORTD =0x00;break;
    1168:	e2 e3       	ldi	r30, 0x32	; 50
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	10 82       	st	Z, r1
    116e:	05 c0       	rjmp	.+10     	; 0x117a <DIO_uint8_setPortValue+0xfa>
				default:local_errorStatus=1;break;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_uint8_setPortValue+0xfa>
				}
		}
		else
		{
			local_errorStatus=1;
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	89 83       	std	Y+1, r24	; 0x01
		}
		return local_errorStatus;
    117a:	89 81       	ldd	r24, Y+1	; 0x01
}
    117c:	27 96       	adiw	r28, 0x07	; 7
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	de bf       	out	0x3e, r29	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	cd bf       	out	0x3d, r28	; 61
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <DIO_uint8_getPinValue>:

/*This function is to read from the PIN register is it HIGH or LOW USED WITH INPUTS*/
uint8 DIO_uint8_getPinValue(uint8 copy_port,uint8 copy_pin,uint8 *copy_pinValue)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	27 97       	sbiw	r28, 0x07	; 7
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	8a 83       	std	Y+2, r24	; 0x02
    11a4:	6b 83       	std	Y+3, r22	; 0x03
    11a6:	5d 83       	std	Y+5, r21	; 0x05
    11a8:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorStatus=0;
    11aa:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pin <= PIN7)
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	88 30       	cpi	r24, 0x08	; 8
    11b0:	08 f0       	brcs	.+2      	; 0x11b4 <DIO_uint8_getPinValue+0x26>
    11b2:	74 c0       	rjmp	.+232    	; 0x129c <DIO_uint8_getPinValue+0x10e>
	{
		switch(copy_port)
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	3f 83       	std	Y+7, r19	; 0x07
    11bc:	2e 83       	std	Y+6, r18	; 0x06
    11be:	4e 81       	ldd	r20, Y+6	; 0x06
    11c0:	5f 81       	ldd	r21, Y+7	; 0x07
    11c2:	41 30       	cpi	r20, 0x01	; 1
    11c4:	51 05       	cpc	r21, r1
    11c6:	59 f1       	breq	.+86     	; 0x121e <DIO_uint8_getPinValue+0x90>
    11c8:	8e 81       	ldd	r24, Y+6	; 0x06
    11ca:	9f 81       	ldd	r25, Y+7	; 0x07
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	91 05       	cpc	r25, r1
    11d0:	34 f4       	brge	.+12     	; 0x11de <DIO_uint8_getPinValue+0x50>
    11d2:	2e 81       	ldd	r18, Y+6	; 0x06
    11d4:	3f 81       	ldd	r19, Y+7	; 0x07
    11d6:	21 15       	cp	r18, r1
    11d8:	31 05       	cpc	r19, r1
    11da:	69 f0       	breq	.+26     	; 0x11f6 <DIO_uint8_getPinValue+0x68>
    11dc:	5c c0       	rjmp	.+184    	; 0x1296 <DIO_uint8_getPinValue+0x108>
    11de:	4e 81       	ldd	r20, Y+6	; 0x06
    11e0:	5f 81       	ldd	r21, Y+7	; 0x07
    11e2:	42 30       	cpi	r20, 0x02	; 2
    11e4:	51 05       	cpc	r21, r1
    11e6:	79 f1       	breq	.+94     	; 0x1246 <DIO_uint8_getPinValue+0xb8>
    11e8:	8e 81       	ldd	r24, Y+6	; 0x06
    11ea:	9f 81       	ldd	r25, Y+7	; 0x07
    11ec:	83 30       	cpi	r24, 0x03	; 3
    11ee:	91 05       	cpc	r25, r1
    11f0:	09 f4       	brne	.+2      	; 0x11f4 <DIO_uint8_getPinValue+0x66>
    11f2:	3d c0       	rjmp	.+122    	; 0x126e <DIO_uint8_getPinValue+0xe0>
    11f4:	50 c0       	rjmp	.+160    	; 0x1296 <DIO_uint8_getPinValue+0x108>
				 {
							case DIO_PORTA:*copy_pinValue=GET_BIT(PINA ,copy_pin);break;
    11f6:	e9 e3       	ldi	r30, 0x39	; 57
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	88 2f       	mov	r24, r24
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	a9 01       	movw	r20, r18
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_uint8_getPinValue+0x80>
    120a:	55 95       	asr	r21
    120c:	47 95       	ror	r20
    120e:	8a 95       	dec	r24
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_uint8_getPinValue+0x7c>
    1212:	ca 01       	movw	r24, r20
    1214:	81 70       	andi	r24, 0x01	; 1
    1216:	ec 81       	ldd	r30, Y+4	; 0x04
    1218:	fd 81       	ldd	r31, Y+5	; 0x05
    121a:	80 83       	st	Z, r24
    121c:	41 c0       	rjmp	.+130    	; 0x12a0 <DIO_uint8_getPinValue+0x112>
							case DIO_PORTB:*copy_pinValue=GET_BIT(PINB ,copy_pin);break;
    121e:	e6 e3       	ldi	r30, 0x36	; 54
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	28 2f       	mov	r18, r24
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	88 2f       	mov	r24, r24
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	a9 01       	movw	r20, r18
    1230:	02 c0       	rjmp	.+4      	; 0x1236 <DIO_uint8_getPinValue+0xa8>
    1232:	55 95       	asr	r21
    1234:	47 95       	ror	r20
    1236:	8a 95       	dec	r24
    1238:	e2 f7       	brpl	.-8      	; 0x1232 <DIO_uint8_getPinValue+0xa4>
    123a:	ca 01       	movw	r24, r20
    123c:	81 70       	andi	r24, 0x01	; 1
    123e:	ec 81       	ldd	r30, Y+4	; 0x04
    1240:	fd 81       	ldd	r31, Y+5	; 0x05
    1242:	80 83       	st	Z, r24
    1244:	2d c0       	rjmp	.+90     	; 0x12a0 <DIO_uint8_getPinValue+0x112>
							case DIO_PORTC:*copy_pinValue=GET_BIT(PINC ,copy_pin);break;
    1246:	e3 e3       	ldi	r30, 0x33	; 51
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	28 2f       	mov	r18, r24
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	88 2f       	mov	r24, r24
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	a9 01       	movw	r20, r18
    1258:	02 c0       	rjmp	.+4      	; 0x125e <DIO_uint8_getPinValue+0xd0>
    125a:	55 95       	asr	r21
    125c:	47 95       	ror	r20
    125e:	8a 95       	dec	r24
    1260:	e2 f7       	brpl	.-8      	; 0x125a <DIO_uint8_getPinValue+0xcc>
    1262:	ca 01       	movw	r24, r20
    1264:	81 70       	andi	r24, 0x01	; 1
    1266:	ec 81       	ldd	r30, Y+4	; 0x04
    1268:	fd 81       	ldd	r31, Y+5	; 0x05
    126a:	80 83       	st	Z, r24
    126c:	19 c0       	rjmp	.+50     	; 0x12a0 <DIO_uint8_getPinValue+0x112>
							case DIO_PORTD:*copy_pinValue=GET_BIT(PIND ,copy_pin);break;
    126e:	e0 e3       	ldi	r30, 0x30	; 48
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	28 2f       	mov	r18, r24
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	a9 01       	movw	r20, r18
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <DIO_uint8_getPinValue+0xf8>
    1282:	55 95       	asr	r21
    1284:	47 95       	ror	r20
    1286:	8a 95       	dec	r24
    1288:	e2 f7       	brpl	.-8      	; 0x1282 <DIO_uint8_getPinValue+0xf4>
    128a:	ca 01       	movw	r24, r20
    128c:	81 70       	andi	r24, 0x01	; 1
    128e:	ec 81       	ldd	r30, Y+4	; 0x04
    1290:	fd 81       	ldd	r31, Y+5	; 0x05
    1292:	80 83       	st	Z, r24
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <DIO_uint8_getPinValue+0x112>
							default:local_errorStatus =1;break;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	89 83       	std	Y+1, r24	; 0x01
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <DIO_uint8_getPinValue+0x112>
				 }
	}
	else
	{
		local_errorStatus =1;
    129c:	81 e0       	ldi	r24, 0x01	; 1
    129e:	89 83       	std	Y+1, r24	; 0x01
	}




  return local_errorStatus;
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a2:	27 96       	adiw	r28, 0x07	; 7
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <DIO_TogPinValue>:

uint8 DIO_TogPinValue(uint8 copy_port,uint8 copy_pin,uint8 copy_val)
{
    12b4:	df 93       	push	r29
    12b6:	cf 93       	push	r28
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <DIO_TogPinValue+0x6>
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <DIO_TogPinValue+0x8>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <DIO_TogPinValue+0xa>
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
    12c2:	8a 83       	std	Y+2, r24	; 0x02
    12c4:	6b 83       	std	Y+3, r22	; 0x03
    12c6:	4c 83       	std	Y+4, r20	; 0x04
	uint8 local_errorStatus=0;
    12c8:	19 82       	std	Y+1, r1	; 0x01
	if(copy_pin <= PIN7)
    12ca:	8b 81       	ldd	r24, Y+3	; 0x03
    12cc:	88 30       	cpi	r24, 0x08	; 8
    12ce:	08 f0       	brcs	.+2      	; 0x12d2 <DIO_TogPinValue+0x1e>
    12d0:	72 c0       	rjmp	.+228    	; 0x13b6 <DIO_TogPinValue+0x102>
	{
		switch(copy_port)
    12d2:	8a 81       	ldd	r24, Y+2	; 0x02
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	3e 83       	std	Y+6, r19	; 0x06
    12da:	2d 83       	std	Y+5, r18	; 0x05
    12dc:	8d 81       	ldd	r24, Y+5	; 0x05
    12de:	9e 81       	ldd	r25, Y+6	; 0x06
    12e0:	81 30       	cpi	r24, 0x01	; 1
    12e2:	91 05       	cpc	r25, r1
    12e4:	49 f1       	breq	.+82     	; 0x1338 <DIO_TogPinValue+0x84>
    12e6:	2d 81       	ldd	r18, Y+5	; 0x05
    12e8:	3e 81       	ldd	r19, Y+6	; 0x06
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	31 05       	cpc	r19, r1
    12ee:	2c f4       	brge	.+10     	; 0x12fa <DIO_TogPinValue+0x46>
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	61 f0       	breq	.+24     	; 0x1310 <DIO_TogPinValue+0x5c>
    12f8:	5b c0       	rjmp	.+182    	; 0x13b0 <DIO_TogPinValue+0xfc>
    12fa:	2d 81       	ldd	r18, Y+5	; 0x05
    12fc:	3e 81       	ldd	r19, Y+6	; 0x06
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	71 f1       	breq	.+92     	; 0x1360 <DIO_TogPinValue+0xac>
    1304:	8d 81       	ldd	r24, Y+5	; 0x05
    1306:	9e 81       	ldd	r25, Y+6	; 0x06
    1308:	83 30       	cpi	r24, 0x03	; 3
    130a:	91 05       	cpc	r25, r1
    130c:	e9 f1       	breq	.+122    	; 0x1388 <DIO_TogPinValue+0xd4>
    130e:	50 c0       	rjmp	.+160    	; 0x13b0 <DIO_TogPinValue+0xfc>
				 {
							case DIO_PORTA:TOG_BIT(PINA ,copy_pin);break;
    1310:	a9 e3       	ldi	r26, 0x39	; 57
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e9 e3       	ldi	r30, 0x39	; 57
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <DIO_TogPinValue+0x7a>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <DIO_TogPinValue+0x76>
    1332:	84 27       	eor	r24, r20
    1334:	8c 93       	st	X, r24
    1336:	41 c0       	rjmp	.+130    	; 0x13ba <DIO_TogPinValue+0x106>
							case DIO_PORTB:TOG_BIT(PINB ,copy_pin);break;
    1338:	a6 e3       	ldi	r26, 0x36	; 54
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e6 e3       	ldi	r30, 0x36	; 54
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <DIO_TogPinValue+0xa2>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <DIO_TogPinValue+0x9e>
    135a:	84 27       	eor	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	2d c0       	rjmp	.+90     	; 0x13ba <DIO_TogPinValue+0x106>
							case DIO_PORTC:TOG_BIT(PINC ,copy_pin);break;
    1360:	a3 e3       	ldi	r26, 0x33	; 51
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e3 e3       	ldi	r30, 0x33	; 51
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <DIO_TogPinValue+0xca>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <DIO_TogPinValue+0xc6>
    1382:	84 27       	eor	r24, r20
    1384:	8c 93       	st	X, r24
    1386:	19 c0       	rjmp	.+50     	; 0x13ba <DIO_TogPinValue+0x106>
							case DIO_PORTD:TOG_BIT(PIND ,copy_pin);break;
    1388:	a0 e3       	ldi	r26, 0x30	; 48
    138a:	b0 e0       	ldi	r27, 0x00	; 0
    138c:	e0 e3       	ldi	r30, 0x30	; 48
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	80 81       	ld	r24, Z
    1392:	48 2f       	mov	r20, r24
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	28 2f       	mov	r18, r24
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	02 2e       	mov	r0, r18
    13a0:	02 c0       	rjmp	.+4      	; 0x13a6 <DIO_TogPinValue+0xf2>
    13a2:	88 0f       	add	r24, r24
    13a4:	99 1f       	adc	r25, r25
    13a6:	0a 94       	dec	r0
    13a8:	e2 f7       	brpl	.-8      	; 0x13a2 <DIO_TogPinValue+0xee>
    13aa:	84 27       	eor	r24, r20
    13ac:	8c 93       	st	X, r24
    13ae:	05 c0       	rjmp	.+10     	; 0x13ba <DIO_TogPinValue+0x106>
							default:local_errorStatus =1;break;
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	89 83       	std	Y+1, r24	; 0x01
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <DIO_TogPinValue+0x106>
				 }
	}
	else
	{
		local_errorStatus =1;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	89 83       	std	Y+1, r24	; 0x01
	}
	return local_errorStatus;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
}
    13bc:	26 96       	adiw	r28, 0x06	; 6
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <DIO_setInterrnalalPullup>:




void DIO_setInterrnalalPullup(uint8 copy_Port ,uint8 copy_pin)
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <DIO_setInterrnalalPullup+0x6>
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	89 83       	std	Y+1, r24	; 0x01
    13da:	6a 83       	std	Y+2, r22	; 0x02
  /*set pin as input*/
	DIO_setPinDirection(copy_Port ,copy_pin ,INPUT);
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	6a 81       	ldd	r22, Y+2	; 0x02
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_setPinDirection>
  /*output high*/
	DIO_setPinValue(copy_Port, copy_pin,HIGH);
    13e6:	89 81       	ldd	r24, Y+1	; 0x01
    13e8:	6a 81       	ldd	r22, Y+2	; 0x02
    13ea:	41 e0       	ldi	r20, 0x01	; 1
    13ec:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_setPinValue>
}
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	08 95       	ret

000013fa <DIO_setHighFourPins>:


uint8 DIO_setHighFourPins(uint8 copy_Port ,uint8 copy_val)
{
    13fa:	df 93       	push	r29
    13fc:	cf 93       	push	r28
    13fe:	00 d0       	rcall	.+0      	; 0x1400 <DIO_setHighFourPins+0x6>
    1400:	00 d0       	rcall	.+0      	; 0x1402 <DIO_setHighFourPins+0x8>
    1402:	0f 92       	push	r0
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	8a 83       	std	Y+2, r24	; 0x02
    140a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 local_errorStatus=0;
    140c:	19 82       	std	Y+1, r1	; 0x01
			if(copy_Port <= DIO_PORTD)
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	84 30       	cpi	r24, 0x04	; 4
    1412:	08 f0       	brcs	.+2      	; 0x1416 <DIO_setHighFourPins+0x1c>
    1414:	66 c0       	rjmp	.+204    	; 0x14e2 <DIO_setHighFourPins+0xe8>
			{
		     copy_val=(copy_val<<4);
    1416:	8b 81       	ldd	r24, Y+3	; 0x03
    1418:	82 95       	swap	r24
    141a:	80 7f       	andi	r24, 0xF0	; 240
    141c:	8b 83       	std	Y+3, r24	; 0x03
		     switch(copy_Port)
    141e:	8a 81       	ldd	r24, Y+2	; 0x02
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	3d 83       	std	Y+5, r19	; 0x05
    1426:	2c 83       	std	Y+4, r18	; 0x04
    1428:	8c 81       	ldd	r24, Y+4	; 0x04
    142a:	9d 81       	ldd	r25, Y+5	; 0x05
    142c:	81 30       	cpi	r24, 0x01	; 1
    142e:	91 05       	cpc	r25, r1
    1430:	29 f1       	breq	.+74     	; 0x147c <DIO_setHighFourPins+0x82>
    1432:	2c 81       	ldd	r18, Y+4	; 0x04
    1434:	3d 81       	ldd	r19, Y+5	; 0x05
    1436:	22 30       	cpi	r18, 0x02	; 2
    1438:	31 05       	cpc	r19, r1
    143a:	2c f4       	brge	.+10     	; 0x1446 <DIO_setHighFourPins+0x4c>
    143c:	8c 81       	ldd	r24, Y+4	; 0x04
    143e:	9d 81       	ldd	r25, Y+5	; 0x05
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	61 f0       	breq	.+24     	; 0x145c <DIO_setHighFourPins+0x62>
    1444:	4b c0       	rjmp	.+150    	; 0x14dc <DIO_setHighFourPins+0xe2>
    1446:	2c 81       	ldd	r18, Y+4	; 0x04
    1448:	3d 81       	ldd	r19, Y+5	; 0x05
    144a:	22 30       	cpi	r18, 0x02	; 2
    144c:	31 05       	cpc	r19, r1
    144e:	31 f1       	breq	.+76     	; 0x149c <DIO_setHighFourPins+0xa2>
    1450:	8c 81       	ldd	r24, Y+4	; 0x04
    1452:	9d 81       	ldd	r25, Y+5	; 0x05
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	91 05       	cpc	r25, r1
    1458:	89 f1       	breq	.+98     	; 0x14bc <DIO_setHighFourPins+0xc2>
    145a:	40 c0       	rjmp	.+128    	; 0x14dc <DIO_setHighFourPins+0xe2>
		     				 {
		     							case DIO_PORTA:PORTA&=0x0f; PORTA|=copy_val;break;
    145c:	ab e3       	ldi	r26, 0x3B	; 59
    145e:	b0 e0       	ldi	r27, 0x00	; 0
    1460:	eb e3       	ldi	r30, 0x3B	; 59
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	8f 70       	andi	r24, 0x0F	; 15
    1468:	8c 93       	st	X, r24
    146a:	ab e3       	ldi	r26, 0x3B	; 59
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	90 81       	ld	r25, Z
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	89 2b       	or	r24, r25
    1478:	8c 93       	st	X, r24
    147a:	35 c0       	rjmp	.+106    	; 0x14e6 <DIO_setHighFourPins+0xec>
		     							case DIO_PORTB:PORTB&=0x0f; PORTB|=copy_val;break;
    147c:	a8 e3       	ldi	r26, 0x38	; 56
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e8 e3       	ldi	r30, 0x38	; 56
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	8f 70       	andi	r24, 0x0F	; 15
    1488:	8c 93       	st	X, r24
    148a:	a8 e3       	ldi	r26, 0x38	; 56
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	e8 e3       	ldi	r30, 0x38	; 56
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	90 81       	ld	r25, Z
    1494:	8b 81       	ldd	r24, Y+3	; 0x03
    1496:	89 2b       	or	r24, r25
    1498:	8c 93       	st	X, r24
    149a:	25 c0       	rjmp	.+74     	; 0x14e6 <DIO_setHighFourPins+0xec>
		     							case DIO_PORTC:PORTC&=0x0f; PORTC|=copy_val;break;
    149c:	a5 e3       	ldi	r26, 0x35	; 53
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e5 e3       	ldi	r30, 0x35	; 53
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8f 70       	andi	r24, 0x0F	; 15
    14a8:	8c 93       	st	X, r24
    14aa:	a5 e3       	ldi	r26, 0x35	; 53
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e3       	ldi	r30, 0x35	; 53
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	90 81       	ld	r25, Z
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	89 2b       	or	r24, r25
    14b8:	8c 93       	st	X, r24
    14ba:	15 c0       	rjmp	.+42     	; 0x14e6 <DIO_setHighFourPins+0xec>
		     							case DIO_PORTD:PORTD&=0x0f; PORTD|=copy_val;break;
    14bc:	a2 e3       	ldi	r26, 0x32	; 50
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	e2 e3       	ldi	r30, 0x32	; 50
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	8f 70       	andi	r24, 0x0F	; 15
    14c8:	8c 93       	st	X, r24
    14ca:	a2 e3       	ldi	r26, 0x32	; 50
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e2 e3       	ldi	r30, 0x32	; 50
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	90 81       	ld	r25, Z
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	89 2b       	or	r24, r25
    14d8:	8c 93       	st	X, r24
    14da:	05 c0       	rjmp	.+10     	; 0x14e6 <DIO_setHighFourPins+0xec>
		     							default:local_errorStatus =1;break;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	89 83       	std	Y+1, r24	; 0x01
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <DIO_setHighFourPins+0xec>
		     				 }

			}
			else
			{
				local_errorStatus =1;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	89 83       	std	Y+1, r24	; 0x01
			}

	return local_errorStatus;
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <getPressed>:
#include "PORT_interface.h"
#include "KYP_interface.h"
#include "KYP_cfg.h"

uint8 getPressed(void)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	a2 97       	sbiw	r28, 0x22	; 34
    1502:	0f b6       	in	r0, 0x3f	; 63
    1504:	f8 94       	cli
    1506:	de bf       	out	0x3e, r29	; 62
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	cd bf       	out	0x3d, r28	; 61
	uint8 COL_ARR[COL_NUM]=COL_PINS;
    150c:	84 e0       	ldi	r24, 0x04	; 4
    150e:	8c 83       	std	Y+4, r24	; 0x04
    1510:	85 e0       	ldi	r24, 0x05	; 5
    1512:	8d 83       	std	Y+5, r24	; 0x05
    1514:	86 e0       	ldi	r24, 0x06	; 6
    1516:	8e 83       	std	Y+6, r24	; 0x06
    1518:	87 e0       	ldi	r24, 0x07	; 7
    151a:	8f 83       	std	Y+7, r24	; 0x07
	uint8 ROW_ARR[ROW_NUM]=ROW_PINS;
    151c:	18 86       	std	Y+8, r1	; 0x08
    151e:	81 e0       	ldi	r24, 0x01	; 1
    1520:	89 87       	std	Y+9, r24	; 0x09
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	8a 87       	std	Y+10, r24	; 0x0a
    1526:	83 e0       	ldi	r24, 0x03	; 3
    1528:	8b 87       	std	Y+11, r24	; 0x0b
	uint8 KEYPAD_KEYS[ROW_NUM][COL_NUM]=KEYS_array;
    152a:	ce 01       	movw	r24, r28
    152c:	0c 96       	adiw	r24, 0x0c	; 12
    152e:	9f 8f       	std	Y+31, r25	; 0x1f
    1530:	8e 8f       	std	Y+30, r24	; 0x1e
    1532:	ee e7       	ldi	r30, 0x7E	; 126
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	f9 a3       	std	Y+33, r31	; 0x21
    1538:	e8 a3       	std	Y+32, r30	; 0x20
    153a:	f0 e1       	ldi	r31, 0x10	; 16
    153c:	fa a3       	std	Y+34, r31	; 0x22
    153e:	e8 a1       	ldd	r30, Y+32	; 0x20
    1540:	f9 a1       	ldd	r31, Y+33	; 0x21
    1542:	00 80       	ld	r0, Z
    1544:	88 a1       	ldd	r24, Y+32	; 0x20
    1546:	99 a1       	ldd	r25, Y+33	; 0x21
    1548:	01 96       	adiw	r24, 0x01	; 1
    154a:	99 a3       	std	Y+33, r25	; 0x21
    154c:	88 a3       	std	Y+32, r24	; 0x20
    154e:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1550:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1552:	00 82       	st	Z, r0
    1554:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1556:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1558:	01 96       	adiw	r24, 0x01	; 1
    155a:	9f 8f       	std	Y+31, r25	; 0x1f
    155c:	8e 8f       	std	Y+30, r24	; 0x1e
    155e:	9a a1       	ldd	r25, Y+34	; 0x22
    1560:	91 50       	subi	r25, 0x01	; 1
    1562:	9a a3       	std	Y+34, r25	; 0x22
    1564:	ea a1       	ldd	r30, Y+34	; 0x22
    1566:	ee 23       	and	r30, r30
    1568:	51 f7       	brne	.-44     	; 0x153e <getPressed+0x46>
	uint8 pressedKey = 0xff;
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	8c 8f       	std	Y+28, r24	; 0x1c
	uint8 button = 0xff;
    156e:	8f ef       	ldi	r24, 0xFF	; 255
    1570:	8b 83       	std	Y+3, r24	; 0x03


	for(uint8 COL_index = 0;COL_index < COL_NUM ; COL_index++)
    1572:	1a 82       	std	Y+2, r1	; 0x02
    1574:	68 c0       	rjmp	.+208    	; 0x1646 <getPressed+0x14e>
	{
		DIO_setPinValue(KYP_PORT,COL_ARR[COL_index],LOW);
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	ce 01       	movw	r24, r28
    157e:	04 96       	adiw	r24, 0x04	; 4
    1580:	fc 01       	movw	r30, r24
    1582:	e2 0f       	add	r30, r18
    1584:	f3 1f       	adc	r31, r19
    1586:	90 81       	ld	r25, Z
    1588:	83 e0       	ldi	r24, 0x03	; 3
    158a:	69 2f       	mov	r22, r25
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_setPinValue>
		for(uint8 ROW_index = 0 ; ROW_index < ROW_NUM ; ROW_index++)
    1592:	19 82       	std	Y+1, r1	; 0x01
    1594:	43 c0       	rjmp	.+134    	; 0x161c <getPressed+0x124>
		{
			DIO_uint8_getPinValue(KYP_PORT,ROW_ARR[ROW_index],&pressedKey);
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	28 2f       	mov	r18, r24
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	ce 01       	movw	r24, r28
    159e:	08 96       	adiw	r24, 0x08	; 8
    15a0:	fc 01       	movw	r30, r24
    15a2:	e2 0f       	add	r30, r18
    15a4:	f3 1f       	adc	r31, r19
    15a6:	90 81       	ld	r25, Z
    15a8:	9e 01       	movw	r18, r28
    15aa:	24 5e       	subi	r18, 0xE4	; 228
    15ac:	3f 4f       	sbci	r19, 0xFF	; 255
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	69 2f       	mov	r22, r25
    15b2:	a9 01       	movw	r20, r18
    15b4:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_uint8_getPinValue>
			if(pressedKey == LOW)
    15b8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15ba:	88 23       	and	r24, r24
    15bc:	61 f5       	brne	.+88     	; 0x1616 <getPressed+0x11e>
    15be:	11 c0       	rjmp	.+34     	; 0x15e2 <getPressed+0xea>
			{
				while(pressedKey == LOW)
				{
					DIO_uint8_getPinValue(KYP_PORT,ROW_ARR[ROW_index],&pressedKey);
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	ce 01       	movw	r24, r28
    15c8:	08 96       	adiw	r24, 0x08	; 8
    15ca:	fc 01       	movw	r30, r24
    15cc:	e2 0f       	add	r30, r18
    15ce:	f3 1f       	adc	r31, r19
    15d0:	90 81       	ld	r25, Z
    15d2:	9e 01       	movw	r18, r28
    15d4:	24 5e       	subi	r18, 0xE4	; 228
    15d6:	3f 4f       	sbci	r19, 0xFF	; 255
    15d8:	83 e0       	ldi	r24, 0x03	; 3
    15da:	69 2f       	mov	r22, r25
    15dc:	a9 01       	movw	r20, r18
    15de:	0e 94 c7 08 	call	0x118e	; 0x118e <DIO_uint8_getPinValue>
		for(uint8 ROW_index = 0 ; ROW_index < ROW_NUM ; ROW_index++)
		{
			DIO_uint8_getPinValue(KYP_PORT,ROW_ARR[ROW_index],&pressedKey);
			if(pressedKey == LOW)
			{
				while(pressedKey == LOW)
    15e2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    15e4:	88 23       	and	r24, r24
    15e6:	61 f3       	breq	.-40     	; 0x15c0 <getPressed+0xc8>
				{
					DIO_uint8_getPinValue(KYP_PORT,ROW_ARR[ROW_index],&pressedKey);
				}
				button=KEYPAD_KEYS[ROW_index][COL_index];
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	8a 81       	ldd	r24, Y+2	; 0x02
    15f0:	48 2f       	mov	r20, r24
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	22 0f       	add	r18, r18
    15f6:	33 1f       	adc	r19, r19
    15f8:	22 0f       	add	r18, r18
    15fa:	33 1f       	adc	r19, r19
    15fc:	ce 01       	movw	r24, r28
    15fe:	01 96       	adiw	r24, 0x01	; 1
    1600:	82 0f       	add	r24, r18
    1602:	93 1f       	adc	r25, r19
    1604:	84 0f       	add	r24, r20
    1606:	95 1f       	adc	r25, r21
    1608:	fc 01       	movw	r30, r24
    160a:	3b 96       	adiw	r30, 0x0b	; 11
    160c:	80 81       	ld	r24, Z
    160e:	8b 83       	std	Y+3, r24	; 0x03
				return button;
    1610:	fb 81       	ldd	r31, Y+3	; 0x03
    1612:	fd 8f       	std	Y+29, r31	; 0x1d
    1614:	1e c0       	rjmp	.+60     	; 0x1652 <getPressed+0x15a>


	for(uint8 COL_index = 0;COL_index < COL_NUM ; COL_index++)
	{
		DIO_setPinValue(KYP_PORT,COL_ARR[COL_index],LOW);
		for(uint8 ROW_index = 0 ; ROW_index < ROW_NUM ; ROW_index++)
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	8f 5f       	subi	r24, 0xFF	; 255
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	84 30       	cpi	r24, 0x04	; 4
    1620:	08 f4       	brcc	.+2      	; 0x1624 <getPressed+0x12c>
    1622:	b9 cf       	rjmp	.-142    	; 0x1596 <getPressed+0x9e>
				button=KEYPAD_KEYS[ROW_index][COL_index];
				return button;

			}
		}
		DIO_setPinValue(KYP_PORT,COL_ARR[COL_index],HIGH);
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	ce 01       	movw	r24, r28
    162c:	04 96       	adiw	r24, 0x04	; 4
    162e:	fc 01       	movw	r30, r24
    1630:	e2 0f       	add	r30, r18
    1632:	f3 1f       	adc	r31, r19
    1634:	90 81       	ld	r25, Z
    1636:	83 e0       	ldi	r24, 0x03	; 3
    1638:	69 2f       	mov	r22, r25
    163a:	41 e0       	ldi	r20, 0x01	; 1
    163c:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_setPinValue>
	uint8 KEYPAD_KEYS[ROW_NUM][COL_NUM]=KEYS_array;
	uint8 pressedKey = 0xff;
	uint8 button = 0xff;


	for(uint8 COL_index = 0;COL_index < COL_NUM ; COL_index++)
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	8f 5f       	subi	r24, 0xFF	; 255
    1644:	8a 83       	std	Y+2, r24	; 0x02
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	84 30       	cpi	r24, 0x04	; 4
    164a:	08 f4       	brcc	.+2      	; 0x164e <getPressed+0x156>
    164c:	94 cf       	rjmp	.-216    	; 0x1576 <getPressed+0x7e>
			}
		}
		DIO_setPinValue(KYP_PORT,COL_ARR[COL_index],HIGH);

	}
	return button;
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	8d 8f       	std	Y+29, r24	; 0x1d
    1652:	8d 8d       	ldd	r24, Y+29	; 0x1d
}
    1654:	a2 96       	adiw	r28, 0x22	; 34
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <LCD_voidinit>:
#include "LCD_interface.h"



void LCD_voidinit                  (void)
{
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	c4 55       	subi	r28, 0x54	; 84
    1674:	d0 40       	sbci	r29, 0x00	; 0
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	fe 01       	movw	r30, r28
    1682:	ef 5a       	subi	r30, 0xAF	; 175
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	a8 e4       	ldi	r26, 0x48	; 72
    168c:	b2 e4       	ldi	r27, 0x42	; 66
    168e:	80 83       	st	Z, r24
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	a2 83       	std	Z+2, r26	; 0x02
    1694:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1696:	8e 01       	movw	r16, r28
    1698:	03 5b       	subi	r16, 0xB3	; 179
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    169c:	fe 01       	movw	r30, r28
    169e:	ef 5a       	subi	r30, 0xAF	; 175
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	60 81       	ld	r22, Z
    16a4:	71 81       	ldd	r23, Z+1	; 0x01
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	93 81       	ldd	r25, Z+3	; 0x03
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	4a e7       	ldi	r20, 0x7A	; 122
    16b0:	55 e4       	ldi	r21, 0x45	; 69
    16b2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b6:	dc 01       	movw	r26, r24
    16b8:	cb 01       	movw	r24, r22
    16ba:	f8 01       	movw	r30, r16
    16bc:	80 83       	st	Z, r24
    16be:	91 83       	std	Z+1, r25	; 0x01
    16c0:	a2 83       	std	Z+2, r26	; 0x02
    16c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16c4:	fe 01       	movw	r30, r28
    16c6:	e3 5b       	subi	r30, 0xB3	; 179
    16c8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ca:	60 81       	ld	r22, Z
    16cc:	71 81       	ldd	r23, Z+1	; 0x01
    16ce:	82 81       	ldd	r24, Z+2	; 0x02
    16d0:	93 81       	ldd	r25, Z+3	; 0x03
    16d2:	20 e0       	ldi	r18, 0x00	; 0
    16d4:	30 e0       	ldi	r19, 0x00	; 0
    16d6:	40 e8       	ldi	r20, 0x80	; 128
    16d8:	5f e3       	ldi	r21, 0x3F	; 63
    16da:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16de:	88 23       	and	r24, r24
    16e0:	44 f4       	brge	.+16     	; 0x16f2 <LCD_voidinit+0x8c>
		__ticks = 1;
    16e2:	fe 01       	movw	r30, r28
    16e4:	e5 5b       	subi	r30, 0xB5	; 181
    16e6:	ff 4f       	sbci	r31, 0xFF	; 255
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	91 83       	std	Z+1, r25	; 0x01
    16ee:	80 83       	st	Z, r24
    16f0:	64 c0       	rjmp	.+200    	; 0x17ba <LCD_voidinit+0x154>
	else if (__tmp > 65535)
    16f2:	fe 01       	movw	r30, r28
    16f4:	e3 5b       	subi	r30, 0xB3	; 179
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	60 81       	ld	r22, Z
    16fa:	71 81       	ldd	r23, Z+1	; 0x01
    16fc:	82 81       	ldd	r24, Z+2	; 0x02
    16fe:	93 81       	ldd	r25, Z+3	; 0x03
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	3f ef       	ldi	r19, 0xFF	; 255
    1704:	4f e7       	ldi	r20, 0x7F	; 127
    1706:	57 e4       	ldi	r21, 0x47	; 71
    1708:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    170c:	18 16       	cp	r1, r24
    170e:	0c f0       	brlt	.+2      	; 0x1712 <LCD_voidinit+0xac>
    1710:	43 c0       	rjmp	.+134    	; 0x1798 <LCD_voidinit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1712:	fe 01       	movw	r30, r28
    1714:	ef 5a       	subi	r30, 0xAF	; 175
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	60 81       	ld	r22, Z
    171a:	71 81       	ldd	r23, Z+1	; 0x01
    171c:	82 81       	ldd	r24, Z+2	; 0x02
    171e:	93 81       	ldd	r25, Z+3	; 0x03
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e2       	ldi	r20, 0x20	; 32
    1726:	51 e4       	ldi	r21, 0x41	; 65
    1728:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172c:	dc 01       	movw	r26, r24
    172e:	cb 01       	movw	r24, r22
    1730:	8e 01       	movw	r16, r28
    1732:	05 5b       	subi	r16, 0xB5	; 181
    1734:	1f 4f       	sbci	r17, 0xFF	; 255
    1736:	bc 01       	movw	r22, r24
    1738:	cd 01       	movw	r24, r26
    173a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	f8 01       	movw	r30, r16
    1744:	91 83       	std	Z+1, r25	; 0x01
    1746:	80 83       	st	Z, r24
    1748:	1f c0       	rjmp	.+62     	; 0x1788 <LCD_voidinit+0x122>
    174a:	fe 01       	movw	r30, r28
    174c:	e7 5b       	subi	r30, 0xB7	; 183
    174e:	ff 4f       	sbci	r31, 0xFF	; 255
    1750:	80 e9       	ldi	r24, 0x90	; 144
    1752:	91 e0       	ldi	r25, 0x01	; 1
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1758:	fe 01       	movw	r30, r28
    175a:	e7 5b       	subi	r30, 0xB7	; 183
    175c:	ff 4f       	sbci	r31, 0xFF	; 255
    175e:	80 81       	ld	r24, Z
    1760:	91 81       	ldd	r25, Z+1	; 0x01
    1762:	01 97       	sbiw	r24, 0x01	; 1
    1764:	f1 f7       	brne	.-4      	; 0x1762 <LCD_voidinit+0xfc>
    1766:	fe 01       	movw	r30, r28
    1768:	e7 5b       	subi	r30, 0xB7	; 183
    176a:	ff 4f       	sbci	r31, 0xFF	; 255
    176c:	91 83       	std	Z+1, r25	; 0x01
    176e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1770:	de 01       	movw	r26, r28
    1772:	a5 5b       	subi	r26, 0xB5	; 181
    1774:	bf 4f       	sbci	r27, 0xFF	; 255
    1776:	fe 01       	movw	r30, r28
    1778:	e5 5b       	subi	r30, 0xB5	; 181
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	80 81       	ld	r24, Z
    177e:	91 81       	ldd	r25, Z+1	; 0x01
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	11 96       	adiw	r26, 0x01	; 1
    1784:	9c 93       	st	X, r25
    1786:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1788:	fe 01       	movw	r30, r28
    178a:	e5 5b       	subi	r30, 0xB5	; 181
    178c:	ff 4f       	sbci	r31, 0xFF	; 255
    178e:	80 81       	ld	r24, Z
    1790:	91 81       	ldd	r25, Z+1	; 0x01
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	d1 f6       	brne	.-76     	; 0x174a <LCD_voidinit+0xe4>
    1796:	27 c0       	rjmp	.+78     	; 0x17e6 <LCD_voidinit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1798:	8e 01       	movw	r16, r28
    179a:	05 5b       	subi	r16, 0xB5	; 181
    179c:	1f 4f       	sbci	r17, 0xFF	; 255
    179e:	fe 01       	movw	r30, r28
    17a0:	e3 5b       	subi	r30, 0xB3	; 179
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17b0:	dc 01       	movw	r26, r24
    17b2:	cb 01       	movw	r24, r22
    17b4:	f8 01       	movw	r30, r16
    17b6:	91 83       	std	Z+1, r25	; 0x01
    17b8:	80 83       	st	Z, r24
    17ba:	de 01       	movw	r26, r28
    17bc:	a9 5b       	subi	r26, 0xB9	; 185
    17be:	bf 4f       	sbci	r27, 0xFF	; 255
    17c0:	fe 01       	movw	r30, r28
    17c2:	e5 5b       	subi	r30, 0xB5	; 181
    17c4:	ff 4f       	sbci	r31, 0xFF	; 255
    17c6:	80 81       	ld	r24, Z
    17c8:	91 81       	ldd	r25, Z+1	; 0x01
    17ca:	8d 93       	st	X+, r24
    17cc:	9c 93       	st	X, r25
    17ce:	fe 01       	movw	r30, r28
    17d0:	e9 5b       	subi	r30, 0xB9	; 185
    17d2:	ff 4f       	sbci	r31, 0xFF	; 255
    17d4:	80 81       	ld	r24, Z
    17d6:	91 81       	ldd	r25, Z+1	; 0x01
    17d8:	01 97       	sbiw	r24, 0x01	; 1
    17da:	f1 f7       	brne	.-4      	; 0x17d8 <LCD_voidinit+0x172>
    17dc:	fe 01       	movw	r30, r28
    17de:	e9 5b       	subi	r30, 0xB9	; 185
    17e0:	ff 4f       	sbci	r31, 0xFF	; 255
    17e2:	91 83       	std	Z+1, r25	; 0x01
    17e4:	80 83       	st	Z, r24
#if  LCD_Mode == 4

	_delay_ms(50);
	DIO_setPinDirection(LCD_DATA_PORT ,PIN4 ,OUTPUT);
    17e6:	80 e0       	ldi	r24, 0x00	; 0
    17e8:	64 e0       	ldi	r22, 0x04	; 4
    17ea:	41 e0       	ldi	r20, 0x01	; 1
    17ec:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT ,PIN5 ,OUTPUT);
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	65 e0       	ldi	r22, 0x05	; 5
    17f4:	41 e0       	ldi	r20, 0x01	; 1
    17f6:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT ,PIN6 ,OUTPUT);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	66 e0       	ldi	r22, 0x06	; 6
    17fe:	41 e0       	ldi	r20, 0x01	; 1
    1800:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_DATA_PORT ,PIN7 ,OUTPUT);
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	67 e0       	ldi	r22, 0x07	; 7
    1808:	41 e0       	ldi	r20, 0x01	; 1
    180a:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_setPinDirection>

	DIO_setPinDirection(LCD_CONTROL_PORT ,LCD_RS ,OUTPUT);
    180e:	81 e0       	ldi	r24, 0x01	; 1
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	41 e0       	ldi	r20, 0x01	; 1
    1814:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CONTROL_PORT ,LCD_RW ,OUTPUT);
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	62 e0       	ldi	r22, 0x02	; 2
    181c:	41 e0       	ldi	r20, 0x01	; 1
    181e:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_setPinDirection>
	DIO_setPinDirection(LCD_CONTROL_PORT ,LCD_EN ,OUTPUT);
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	63 e0       	ldi	r22, 0x03	; 3
    1826:	41 e0       	ldi	r20, 0x01	; 1
    1828:	0e 94 9b 05 	call	0xb36	; 0xb36 <DIO_setPinDirection>

	LCD_sendCommand(SET_HOME);                     //Set Home
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_sendCommand>
    1832:	fe 01       	movw	r30, r28
    1834:	ed 5b       	subi	r30, 0xBD	; 189
    1836:	ff 4f       	sbci	r31, 0xFF	; 255
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a0 ef       	ldi	r26, 0xF0	; 240
    183e:	b1 e4       	ldi	r27, 0x41	; 65
    1840:	80 83       	st	Z, r24
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	a2 83       	std	Z+2, r26	; 0x02
    1846:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1848:	8e 01       	movw	r16, r28
    184a:	01 5c       	subi	r16, 0xC1	; 193
    184c:	1f 4f       	sbci	r17, 0xFF	; 255
    184e:	fe 01       	movw	r30, r28
    1850:	ed 5b       	subi	r30, 0xBD	; 189
    1852:	ff 4f       	sbci	r31, 0xFF	; 255
    1854:	60 81       	ld	r22, Z
    1856:	71 81       	ldd	r23, Z+1	; 0x01
    1858:	82 81       	ldd	r24, Z+2	; 0x02
    185a:	93 81       	ldd	r25, Z+3	; 0x03
    185c:	20 e0       	ldi	r18, 0x00	; 0
    185e:	30 e0       	ldi	r19, 0x00	; 0
    1860:	4a e7       	ldi	r20, 0x7A	; 122
    1862:	55 e4       	ldi	r21, 0x45	; 69
    1864:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1868:	dc 01       	movw	r26, r24
    186a:	cb 01       	movw	r24, r22
    186c:	f8 01       	movw	r30, r16
    186e:	80 83       	st	Z, r24
    1870:	91 83       	std	Z+1, r25	; 0x01
    1872:	a2 83       	std	Z+2, r26	; 0x02
    1874:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1876:	fe 01       	movw	r30, r28
    1878:	ff 96       	adiw	r30, 0x3f	; 63
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	20 e0       	ldi	r18, 0x00	; 0
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	40 e8       	ldi	r20, 0x80	; 128
    1888:	5f e3       	ldi	r21, 0x3F	; 63
    188a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    188e:	88 23       	and	r24, r24
    1890:	2c f4       	brge	.+10     	; 0x189c <LCD_voidinit+0x236>
		__ticks = 1;
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	9e af       	std	Y+62, r25	; 0x3e
    1898:	8d af       	std	Y+61, r24	; 0x3d
    189a:	46 c0       	rjmp	.+140    	; 0x1928 <LCD_voidinit+0x2c2>
	else if (__tmp > 65535)
    189c:	fe 01       	movw	r30, r28
    189e:	ff 96       	adiw	r30, 0x3f	; 63
    18a0:	60 81       	ld	r22, Z
    18a2:	71 81       	ldd	r23, Z+1	; 0x01
    18a4:	82 81       	ldd	r24, Z+2	; 0x02
    18a6:	93 81       	ldd	r25, Z+3	; 0x03
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	3f ef       	ldi	r19, 0xFF	; 255
    18ac:	4f e7       	ldi	r20, 0x7F	; 127
    18ae:	57 e4       	ldi	r21, 0x47	; 71
    18b0:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18b4:	18 16       	cp	r1, r24
    18b6:	64 f5       	brge	.+88     	; 0x1910 <LCD_voidinit+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18b8:	fe 01       	movw	r30, r28
    18ba:	ed 5b       	subi	r30, 0xBD	; 189
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	60 81       	ld	r22, Z
    18c0:	71 81       	ldd	r23, Z+1	; 0x01
    18c2:	82 81       	ldd	r24, Z+2	; 0x02
    18c4:	93 81       	ldd	r25, Z+3	; 0x03
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e2       	ldi	r20, 0x20	; 32
    18cc:	51 e4       	ldi	r21, 0x41	; 65
    18ce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18d2:	dc 01       	movw	r26, r24
    18d4:	cb 01       	movw	r24, r22
    18d6:	bc 01       	movw	r22, r24
    18d8:	cd 01       	movw	r24, r26
    18da:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	9e af       	std	Y+62, r25	; 0x3e
    18e4:	8d af       	std	Y+61, r24	; 0x3d
    18e6:	0f c0       	rjmp	.+30     	; 0x1906 <LCD_voidinit+0x2a0>
    18e8:	80 e9       	ldi	r24, 0x90	; 144
    18ea:	91 e0       	ldi	r25, 0x01	; 1
    18ec:	9c af       	std	Y+60, r25	; 0x3c
    18ee:	8b af       	std	Y+59, r24	; 0x3b
    18f0:	8b ad       	ldd	r24, Y+59	; 0x3b
    18f2:	9c ad       	ldd	r25, Y+60	; 0x3c
    18f4:	01 97       	sbiw	r24, 0x01	; 1
    18f6:	f1 f7       	brne	.-4      	; 0x18f4 <LCD_voidinit+0x28e>
    18f8:	9c af       	std	Y+60, r25	; 0x3c
    18fa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fc:	8d ad       	ldd	r24, Y+61	; 0x3d
    18fe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	9e af       	std	Y+62, r25	; 0x3e
    1904:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1906:	8d ad       	ldd	r24, Y+61	; 0x3d
    1908:	9e ad       	ldd	r25, Y+62	; 0x3e
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	69 f7       	brne	.-38     	; 0x18e8 <LCD_voidinit+0x282>
    190e:	16 c0       	rjmp	.+44     	; 0x193c <LCD_voidinit+0x2d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1910:	fe 01       	movw	r30, r28
    1912:	ff 96       	adiw	r30, 0x3f	; 63
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1920:	dc 01       	movw	r26, r24
    1922:	cb 01       	movw	r24, r22
    1924:	9e af       	std	Y+62, r25	; 0x3e
    1926:	8d af       	std	Y+61, r24	; 0x3d
    1928:	8d ad       	ldd	r24, Y+61	; 0x3d
    192a:	9e ad       	ldd	r25, Y+62	; 0x3e
    192c:	9a af       	std	Y+58, r25	; 0x3a
    192e:	89 af       	std	Y+57, r24	; 0x39
    1930:	89 ad       	ldd	r24, Y+57	; 0x39
    1932:	9a ad       	ldd	r25, Y+58	; 0x3a
    1934:	01 97       	sbiw	r24, 0x01	; 1
    1936:	f1 f7       	brne	.-4      	; 0x1934 <LCD_voidinit+0x2ce>
    1938:	9a af       	std	Y+58, r25	; 0x3a
    193a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(30);
	LCD_sendCommand(Four_bits);                    //Function set
    193c:	88 e2       	ldi	r24, 0x28	; 40
    193e:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_sendCommand>
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	a0 e8       	ldi	r26, 0x80	; 128
    1948:	bf e3       	ldi	r27, 0x3F	; 63
    194a:	8d ab       	std	Y+53, r24	; 0x35
    194c:	9e ab       	std	Y+54, r25	; 0x36
    194e:	af ab       	std	Y+55, r26	; 0x37
    1950:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1952:	6d a9       	ldd	r22, Y+53	; 0x35
    1954:	7e a9       	ldd	r23, Y+54	; 0x36
    1956:	8f a9       	ldd	r24, Y+55	; 0x37
    1958:	98 ad       	ldd	r25, Y+56	; 0x38
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	4a e7       	ldi	r20, 0x7A	; 122
    1960:	55 e4       	ldi	r21, 0x45	; 69
    1962:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	89 ab       	std	Y+49, r24	; 0x31
    196c:	9a ab       	std	Y+50, r25	; 0x32
    196e:	ab ab       	std	Y+51, r26	; 0x33
    1970:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1972:	69 a9       	ldd	r22, Y+49	; 0x31
    1974:	7a a9       	ldd	r23, Y+50	; 0x32
    1976:	8b a9       	ldd	r24, Y+51	; 0x33
    1978:	9c a9       	ldd	r25, Y+52	; 0x34
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e8       	ldi	r20, 0x80	; 128
    1980:	5f e3       	ldi	r21, 0x3F	; 63
    1982:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1986:	88 23       	and	r24, r24
    1988:	2c f4       	brge	.+10     	; 0x1994 <LCD_voidinit+0x32e>
		__ticks = 1;
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	98 ab       	std	Y+48, r25	; 0x30
    1990:	8f a7       	std	Y+47, r24	; 0x2f
    1992:	3f c0       	rjmp	.+126    	; 0x1a12 <LCD_voidinit+0x3ac>
	else if (__tmp > 65535)
    1994:	69 a9       	ldd	r22, Y+49	; 0x31
    1996:	7a a9       	ldd	r23, Y+50	; 0x32
    1998:	8b a9       	ldd	r24, Y+51	; 0x33
    199a:	9c a9       	ldd	r25, Y+52	; 0x34
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	3f ef       	ldi	r19, 0xFF	; 255
    19a0:	4f e7       	ldi	r20, 0x7F	; 127
    19a2:	57 e4       	ldi	r21, 0x47	; 71
    19a4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19a8:	18 16       	cp	r1, r24
    19aa:	4c f5       	brge	.+82     	; 0x19fe <LCD_voidinit+0x398>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ac:	6d a9       	ldd	r22, Y+53	; 0x35
    19ae:	7e a9       	ldd	r23, Y+54	; 0x36
    19b0:	8f a9       	ldd	r24, Y+55	; 0x37
    19b2:	98 ad       	ldd	r25, Y+56	; 0x38
    19b4:	20 e0       	ldi	r18, 0x00	; 0
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	40 e2       	ldi	r20, 0x20	; 32
    19ba:	51 e4       	ldi	r21, 0x41	; 65
    19bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19c0:	dc 01       	movw	r26, r24
    19c2:	cb 01       	movw	r24, r22
    19c4:	bc 01       	movw	r22, r24
    19c6:	cd 01       	movw	r24, r26
    19c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19cc:	dc 01       	movw	r26, r24
    19ce:	cb 01       	movw	r24, r22
    19d0:	98 ab       	std	Y+48, r25	; 0x30
    19d2:	8f a7       	std	Y+47, r24	; 0x2f
    19d4:	0f c0       	rjmp	.+30     	; 0x19f4 <LCD_voidinit+0x38e>
    19d6:	80 e9       	ldi	r24, 0x90	; 144
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	9e a7       	std	Y+46, r25	; 0x2e
    19dc:	8d a7       	std	Y+45, r24	; 0x2d
    19de:	8d a5       	ldd	r24, Y+45	; 0x2d
    19e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    19e2:	01 97       	sbiw	r24, 0x01	; 1
    19e4:	f1 f7       	brne	.-4      	; 0x19e2 <LCD_voidinit+0x37c>
    19e6:	9e a7       	std	Y+46, r25	; 0x2e
    19e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    19ec:	98 a9       	ldd	r25, Y+48	; 0x30
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	98 ab       	std	Y+48, r25	; 0x30
    19f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    19f6:	98 a9       	ldd	r25, Y+48	; 0x30
    19f8:	00 97       	sbiw	r24, 0x00	; 0
    19fa:	69 f7       	brne	.-38     	; 0x19d6 <LCD_voidinit+0x370>
    19fc:	14 c0       	rjmp	.+40     	; 0x1a26 <LCD_voidinit+0x3c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1a00:	7a a9       	ldd	r23, Y+50	; 0x32
    1a02:	8b a9       	ldd	r24, Y+51	; 0x33
    1a04:	9c a9       	ldd	r25, Y+52	; 0x34
    1a06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a0a:	dc 01       	movw	r26, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	98 ab       	std	Y+48, r25	; 0x30
    1a10:	8f a7       	std	Y+47, r24	; 0x2f
    1a12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a14:	98 a9       	ldd	r25, Y+48	; 0x30
    1a16:	9c a7       	std	Y+44, r25	; 0x2c
    1a18:	8b a7       	std	Y+43, r24	; 0x2b
    1a1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <LCD_voidinit+0x3b8>
    1a22:	9c a7       	std	Y+44, r25	; 0x2c
    1a24:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF);        //display ON
    1a26:	8c e0       	ldi	r24, 0x0C	; 12
    1a28:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_sendCommand>
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a0 e8       	ldi	r26, 0x80	; 128
    1a32:	bf e3       	ldi	r27, 0x3F	; 63
    1a34:	8f a3       	std	Y+39, r24	; 0x27
    1a36:	98 a7       	std	Y+40, r25	; 0x28
    1a38:	a9 a7       	std	Y+41, r26	; 0x29
    1a3a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a3e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a40:	89 a5       	ldd	r24, Y+41	; 0x29
    1a42:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a44:	20 e0       	ldi	r18, 0x00	; 0
    1a46:	30 e0       	ldi	r19, 0x00	; 0
    1a48:	4a e7       	ldi	r20, 0x7A	; 122
    1a4a:	55 e4       	ldi	r21, 0x45	; 69
    1a4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	8b a3       	std	Y+35, r24	; 0x23
    1a56:	9c a3       	std	Y+36, r25	; 0x24
    1a58:	ad a3       	std	Y+37, r26	; 0x25
    1a5a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a60:	8d a1       	ldd	r24, Y+37	; 0x25
    1a62:	9e a1       	ldd	r25, Y+38	; 0x26
    1a64:	20 e0       	ldi	r18, 0x00	; 0
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	40 e8       	ldi	r20, 0x80	; 128
    1a6a:	5f e3       	ldi	r21, 0x3F	; 63
    1a6c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1a70:	88 23       	and	r24, r24
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <LCD_voidinit+0x418>
		__ticks = 1;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	9a a3       	std	Y+34, r25	; 0x22
    1a7a:	89 a3       	std	Y+33, r24	; 0x21
    1a7c:	3f c0       	rjmp	.+126    	; 0x1afc <LCD_voidinit+0x496>
	else if (__tmp > 65535)
    1a7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a80:	7c a1       	ldd	r23, Y+36	; 0x24
    1a82:	8d a1       	ldd	r24, Y+37	; 0x25
    1a84:	9e a1       	ldd	r25, Y+38	; 0x26
    1a86:	20 e0       	ldi	r18, 0x00	; 0
    1a88:	3f ef       	ldi	r19, 0xFF	; 255
    1a8a:	4f e7       	ldi	r20, 0x7F	; 127
    1a8c:	57 e4       	ldi	r21, 0x47	; 71
    1a8e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a92:	18 16       	cp	r1, r24
    1a94:	4c f5       	brge	.+82     	; 0x1ae8 <LCD_voidinit+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a96:	6f a1       	ldd	r22, Y+39	; 0x27
    1a98:	78 a5       	ldd	r23, Y+40	; 0x28
    1a9a:	89 a5       	ldd	r24, Y+41	; 0x29
    1a9c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	40 e2       	ldi	r20, 0x20	; 32
    1aa4:	51 e4       	ldi	r21, 0x41	; 65
    1aa6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	bc 01       	movw	r22, r24
    1ab0:	cd 01       	movw	r24, r26
    1ab2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	9a a3       	std	Y+34, r25	; 0x22
    1abc:	89 a3       	std	Y+33, r24	; 0x21
    1abe:	0f c0       	rjmp	.+30     	; 0x1ade <LCD_voidinit+0x478>
    1ac0:	80 e9       	ldi	r24, 0x90	; 144
    1ac2:	91 e0       	ldi	r25, 0x01	; 1
    1ac4:	98 a3       	std	Y+32, r25	; 0x20
    1ac6:	8f 8f       	std	Y+31, r24	; 0x1f
    1ac8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1aca:	98 a1       	ldd	r25, Y+32	; 0x20
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	f1 f7       	brne	.-4      	; 0x1acc <LCD_voidinit+0x466>
    1ad0:	98 a3       	std	Y+32, r25	; 0x20
    1ad2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad4:	89 a1       	ldd	r24, Y+33	; 0x21
    1ad6:	9a a1       	ldd	r25, Y+34	; 0x22
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	9a a3       	std	Y+34, r25	; 0x22
    1adc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ade:	89 a1       	ldd	r24, Y+33	; 0x21
    1ae0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ae2:	00 97       	sbiw	r24, 0x00	; 0
    1ae4:	69 f7       	brne	.-38     	; 0x1ac0 <LCD_voidinit+0x45a>
    1ae6:	14 c0       	rjmp	.+40     	; 0x1b10 <LCD_voidinit+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae8:	6b a1       	ldd	r22, Y+35	; 0x23
    1aea:	7c a1       	ldd	r23, Y+36	; 0x24
    1aec:	8d a1       	ldd	r24, Y+37	; 0x25
    1aee:	9e a1       	ldd	r25, Y+38	; 0x26
    1af0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	9a a3       	std	Y+34, r25	; 0x22
    1afa:	89 a3       	std	Y+33, r24	; 0x21
    1afc:	89 a1       	ldd	r24, Y+33	; 0x21
    1afe:	9a a1       	ldd	r25, Y+34	; 0x22
    1b00:	9e 8f       	std	Y+30, r25	; 0x1e
    1b02:	8d 8f       	std	Y+29, r24	; 0x1d
    1b04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <LCD_voidinit+0x4a2>
    1b0c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b0e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_sendCommand(DISPLAY_CLEAR);                //Display clear
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_sendCommand>
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	a0 e2       	ldi	r26, 0x20	; 32
    1b1c:	b1 e4       	ldi	r27, 0x41	; 65
    1b1e:	89 8f       	std	Y+25, r24	; 0x19
    1b20:	9a 8f       	std	Y+26, r25	; 0x1a
    1b22:	ab 8f       	std	Y+27, r26	; 0x1b
    1b24:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b26:	69 8d       	ldd	r22, Y+25	; 0x19
    1b28:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b2a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b2c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	4a e7       	ldi	r20, 0x7A	; 122
    1b34:	55 e4       	ldi	r21, 0x45	; 69
    1b36:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	8d 8b       	std	Y+21, r24	; 0x15
    1b40:	9e 8b       	std	Y+22, r25	; 0x16
    1b42:	af 8b       	std	Y+23, r26	; 0x17
    1b44:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b46:	6d 89       	ldd	r22, Y+21	; 0x15
    1b48:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	5f e3       	ldi	r21, 0x3F	; 63
    1b56:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b5a:	88 23       	and	r24, r24
    1b5c:	2c f4       	brge	.+10     	; 0x1b68 <LCD_voidinit+0x502>
		__ticks = 1;
    1b5e:	81 e0       	ldi	r24, 0x01	; 1
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	9c 8b       	std	Y+20, r25	; 0x14
    1b64:	8b 8b       	std	Y+19, r24	; 0x13
    1b66:	3f c0       	rjmp	.+126    	; 0x1be6 <LCD_voidinit+0x580>
	else if (__tmp > 65535)
    1b68:	6d 89       	ldd	r22, Y+21	; 0x15
    1b6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b70:	20 e0       	ldi	r18, 0x00	; 0
    1b72:	3f ef       	ldi	r19, 0xFF	; 255
    1b74:	4f e7       	ldi	r20, 0x7F	; 127
    1b76:	57 e4       	ldi	r21, 0x47	; 71
    1b78:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b7c:	18 16       	cp	r1, r24
    1b7e:	4c f5       	brge	.+82     	; 0x1bd2 <LCD_voidinit+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b80:	69 8d       	ldd	r22, Y+25	; 0x19
    1b82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e2       	ldi	r20, 0x20	; 32
    1b8e:	51 e4       	ldi	r21, 0x41	; 65
    1b90:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	bc 01       	movw	r22, r24
    1b9a:	cd 01       	movw	r24, r26
    1b9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	9c 8b       	std	Y+20, r25	; 0x14
    1ba6:	8b 8b       	std	Y+19, r24	; 0x13
    1ba8:	0f c0       	rjmp	.+30     	; 0x1bc8 <LCD_voidinit+0x562>
    1baa:	80 e9       	ldi	r24, 0x90	; 144
    1bac:	91 e0       	ldi	r25, 0x01	; 1
    1bae:	9a 8b       	std	Y+18, r25	; 0x12
    1bb0:	89 8b       	std	Y+17, r24	; 0x11
    1bb2:	89 89       	ldd	r24, Y+17	; 0x11
    1bb4:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb6:	01 97       	sbiw	r24, 0x01	; 1
    1bb8:	f1 f7       	brne	.-4      	; 0x1bb6 <LCD_voidinit+0x550>
    1bba:	9a 8b       	std	Y+18, r25	; 0x12
    1bbc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	9c 8b       	std	Y+20, r25	; 0x14
    1bc6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bc8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bca:	9c 89       	ldd	r25, Y+20	; 0x14
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	69 f7       	brne	.-38     	; 0x1baa <LCD_voidinit+0x544>
    1bd0:	14 c0       	rjmp	.+40     	; 0x1bfa <LCD_voidinit+0x594>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	9c 8b       	std	Y+20, r25	; 0x14
    1be4:	8b 8b       	std	Y+19, r24	; 0x13
    1be6:	8b 89       	ldd	r24, Y+19	; 0x13
    1be8:	9c 89       	ldd	r25, Y+20	; 0x14
    1bea:	98 8b       	std	Y+16, r25	; 0x10
    1bec:	8f 87       	std	Y+15, r24	; 0x0f
    1bee:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bf0:	98 89       	ldd	r25, Y+16	; 0x10
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LCD_voidinit+0x58c>
    1bf6:	98 8b       	std	Y+16, r25	; 0x10
    1bf8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	LCD_sendCommand(ENTRY_MODE);                   //Entry Mode
    1bfa:	86 e0       	ldi	r24, 0x06	; 6
    1bfc:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_sendCommand>
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	a0 e8       	ldi	r26, 0x80	; 128
    1c06:	bf e3       	ldi	r27, 0x3F	; 63
    1c08:	8b 87       	std	Y+11, r24	; 0x0b
    1c0a:	9c 87       	std	Y+12, r25	; 0x0c
    1c0c:	ad 87       	std	Y+13, r26	; 0x0d
    1c0e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c10:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c12:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c18:	20 e0       	ldi	r18, 0x00	; 0
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	4a e7       	ldi	r20, 0x7A	; 122
    1c1e:	55 e4       	ldi	r21, 0x45	; 69
    1c20:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c24:	dc 01       	movw	r26, r24
    1c26:	cb 01       	movw	r24, r22
    1c28:	8f 83       	std	Y+7, r24	; 0x07
    1c2a:	98 87       	std	Y+8, r25	; 0x08
    1c2c:	a9 87       	std	Y+9, r26	; 0x09
    1c2e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c30:	6f 81       	ldd	r22, Y+7	; 0x07
    1c32:	78 85       	ldd	r23, Y+8	; 0x08
    1c34:	89 85       	ldd	r24, Y+9	; 0x09
    1c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c38:	20 e0       	ldi	r18, 0x00	; 0
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	40 e8       	ldi	r20, 0x80	; 128
    1c3e:	5f e3       	ldi	r21, 0x3F	; 63
    1c40:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c44:	88 23       	and	r24, r24
    1c46:	2c f4       	brge	.+10     	; 0x1c52 <LCD_voidinit+0x5ec>
		__ticks = 1;
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	9e 83       	std	Y+6, r25	; 0x06
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
    1c50:	3f c0       	rjmp	.+126    	; 0x1cd0 <LCD_voidinit+0x66a>
	else if (__tmp > 65535)
    1c52:	6f 81       	ldd	r22, Y+7	; 0x07
    1c54:	78 85       	ldd	r23, Y+8	; 0x08
    1c56:	89 85       	ldd	r24, Y+9	; 0x09
    1c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	3f ef       	ldi	r19, 0xFF	; 255
    1c5e:	4f e7       	ldi	r20, 0x7F	; 127
    1c60:	57 e4       	ldi	r21, 0x47	; 71
    1c62:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c66:	18 16       	cp	r1, r24
    1c68:	4c f5       	brge	.+82     	; 0x1cbc <LCD_voidinit+0x656>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e2       	ldi	r20, 0x20	; 32
    1c78:	51 e4       	ldi	r21, 0x41	; 65
    1c7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	9e 83       	std	Y+6, r25	; 0x06
    1c90:	8d 83       	std	Y+5, r24	; 0x05
    1c92:	0f c0       	rjmp	.+30     	; 0x1cb2 <LCD_voidinit+0x64c>
    1c94:	80 e9       	ldi	r24, 0x90	; 144
    1c96:	91 e0       	ldi	r25, 0x01	; 1
    1c98:	9c 83       	std	Y+4, r25	; 0x04
    1c9a:	8b 83       	std	Y+3, r24	; 0x03
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <LCD_voidinit+0x63a>
    1ca4:	9c 83       	std	Y+4, r25	; 0x04
    1ca6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    1caa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	9e 83       	std	Y+6, r25	; 0x06
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	69 f7       	brne	.-38     	; 0x1c94 <LCD_voidinit+0x62e>
    1cba:	14 c0       	rjmp	.+40     	; 0x1ce4 <LCD_voidinit+0x67e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbe:	78 85       	ldd	r23, Y+8	; 0x08
    1cc0:	89 85       	ldd	r24, Y+9	; 0x09
    1cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cc8:	dc 01       	movw	r26, r24
    1cca:	cb 01       	movw	r24, r22
    1ccc:	9e 83       	std	Y+6, r25	; 0x06
    1cce:	8d 83       	std	Y+5, r24	; 0x05
    1cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd4:	9a 83       	std	Y+2, r25	; 0x02
    1cd6:	89 83       	std	Y+1, r24	; 0x01
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	9a 81       	ldd	r25, Y+2	; 0x02
    1cdc:	01 97       	sbiw	r24, 0x01	; 1
    1cde:	f1 f7       	brne	.-4      	; 0x1cdc <LCD_voidinit+0x676>
    1ce0:	9a 83       	std	Y+2, r25	; 0x02
    1ce2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

#endif
}
    1ce4:	cc 5a       	subi	r28, 0xAC	; 172
    1ce6:	df 4f       	sbci	r29, 0xFF	; 255
    1ce8:	0f b6       	in	r0, 0x3f	; 63
    1cea:	f8 94       	cli
    1cec:	de bf       	out	0x3e, r29	; 62
    1cee:	0f be       	out	0x3f, r0	; 63
    1cf0:	cd bf       	out	0x3d, r28	; 61
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	1f 91       	pop	r17
    1cf8:	0f 91       	pop	r16
    1cfa:	08 95       	ret

00001cfc <LCD_sendData>:



void LCD_sendData                  (uint8 copy_Data)
{
    1cfc:	df 93       	push	r29
    1cfe:	cf 93       	push	r28
    1d00:	0f 92       	push	r0
    1d02:	cd b7       	in	r28, 0x3d	; 61
    1d04:	de b7       	in	r29, 0x3e	; 62
    1d06:	89 83       	std	Y+1, r24	; 0x01
#if LCD_Mode == 4
	DIO_setPinValue(LCD_CONTROL_PORT ,LCD_RS,HIGH);
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	61 e0       	ldi	r22, 0x01	; 1
    1d0c:	41 e0       	ldi	r20, 0x01	; 1
    1d0e:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_setPinValue>
	DIO_setPinValue(LCD_CONTROL_PORT ,LCD_RW ,LOW);
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	62 e0       	ldi	r22, 0x02	; 2
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_setPinValue>
	DIO_setHighFourPins(LCD_DATA_PORT,(copy_Data>>4));
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	98 2f       	mov	r25, r24
    1d20:	92 95       	swap	r25
    1d22:	9f 70       	andi	r25, 0x0F	; 15
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	69 2f       	mov	r22, r25
    1d28:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_setHighFourPins>
	LCD_SendFallingEdge();
    1d2c:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_SendFallingEdge>
	DIO_setHighFourPins(LCD_DATA_PORT,copy_Data);
    1d30:	80 e0       	ldi	r24, 0x00	; 0
    1d32:	69 81       	ldd	r22, Y+1	; 0x01
    1d34:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_setHighFourPins>
	LCD_SendFallingEdge();
    1d38:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_SendFallingEdge>
#endif
}
    1d3c:	0f 90       	pop	r0
    1d3e:	cf 91       	pop	r28
    1d40:	df 91       	pop	r29
    1d42:	08 95       	ret

00001d44 <LCD_sendCommand>:


void LCD_sendCommand                 (uint8 copy_Data)
{
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	0f 92       	push	r0
    1d4a:	cd b7       	in	r28, 0x3d	; 61
    1d4c:	de b7       	in	r29, 0x3e	; 62
    1d4e:	89 83       	std	Y+1, r24	; 0x01
#if LCD_Mode == 4
	DIO_setPinValue(LCD_CONTROL_PORT ,LCD_RS,LOW);
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	61 e0       	ldi	r22, 0x01	; 1
    1d54:	40 e0       	ldi	r20, 0x00	; 0
    1d56:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_setPinValue>
	DIO_setPinValue(LCD_CONTROL_PORT ,LCD_RW ,LOW);
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	62 e0       	ldi	r22, 0x02	; 2
    1d5e:	40 e0       	ldi	r20, 0x00	; 0
    1d60:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_setPinValue>
	DIO_setHighFourPins(LCD_DATA_PORT,(copy_Data>>4));
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	98 2f       	mov	r25, r24
    1d68:	92 95       	swap	r25
    1d6a:	9f 70       	andi	r25, 0x0F	; 15
    1d6c:	80 e0       	ldi	r24, 0x00	; 0
    1d6e:	69 2f       	mov	r22, r25
    1d70:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_setHighFourPins>
	LCD_SendFallingEdge();
    1d74:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_SendFallingEdge>
	DIO_setHighFourPins(LCD_DATA_PORT,copy_Data);
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	69 81       	ldd	r22, Y+1	; 0x01
    1d7c:	0e 94 fd 09 	call	0x13fa	; 0x13fa <DIO_setHighFourPins>
	LCD_SendFallingEdge();
    1d80:	0e 94 c6 0e 	call	0x1d8c	; 0x1d8c <LCD_SendFallingEdge>
#endif
}
    1d84:	0f 90       	pop	r0
    1d86:	cf 91       	pop	r28
    1d88:	df 91       	pop	r29
    1d8a:	08 95       	ret

00001d8c <LCD_SendFallingEdge>:

void LCD_SendFallingEdge (void)
{
    1d8c:	df 93       	push	r29
    1d8e:	cf 93       	push	r28
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	6c 97       	sbiw	r28, 0x1c	; 28
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	de bf       	out	0x3e, r29	; 62
    1d9c:	0f be       	out	0x3f, r0	; 63
    1d9e:	cd bf       	out	0x3d, r28	; 61
	DIO_setPinValue(LCD_CONTROL_PORT ,LCD_EN ,HIGH);
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	63 e0       	ldi	r22, 0x03	; 3
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_setPinValue>
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	a0 e8       	ldi	r26, 0x80	; 128
    1db0:	bf e3       	ldi	r27, 0x3F	; 63
    1db2:	89 8f       	std	Y+25, r24	; 0x19
    1db4:	9a 8f       	std	Y+26, r25	; 0x1a
    1db6:	ab 8f       	std	Y+27, r26	; 0x1b
    1db8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dba:	69 8d       	ldd	r22, Y+25	; 0x19
    1dbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	4a e7       	ldi	r20, 0x7A	; 122
    1dc8:	55 e4       	ldi	r21, 0x45	; 69
    1dca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	8d 8b       	std	Y+21, r24	; 0x15
    1dd4:	9e 8b       	std	Y+22, r25	; 0x16
    1dd6:	af 8b       	std	Y+23, r26	; 0x17
    1dd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1dda:	6d 89       	ldd	r22, Y+21	; 0x15
    1ddc:	7e 89       	ldd	r23, Y+22	; 0x16
    1dde:	8f 89       	ldd	r24, Y+23	; 0x17
    1de0:	98 8d       	ldd	r25, Y+24	; 0x18
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e8       	ldi	r20, 0x80	; 128
    1de8:	5f e3       	ldi	r21, 0x3F	; 63
    1dea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1dee:	88 23       	and	r24, r24
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <LCD_SendFallingEdge+0x70>
		__ticks = 1;
    1df2:	81 e0       	ldi	r24, 0x01	; 1
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	9c 8b       	std	Y+20, r25	; 0x14
    1df8:	8b 8b       	std	Y+19, r24	; 0x13
    1dfa:	3f c0       	rjmp	.+126    	; 0x1e7a <LCD_SendFallingEdge+0xee>
	else if (__tmp > 65535)
    1dfc:	6d 89       	ldd	r22, Y+21	; 0x15
    1dfe:	7e 89       	ldd	r23, Y+22	; 0x16
    1e00:	8f 89       	ldd	r24, Y+23	; 0x17
    1e02:	98 8d       	ldd	r25, Y+24	; 0x18
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	3f ef       	ldi	r19, 0xFF	; 255
    1e08:	4f e7       	ldi	r20, 0x7F	; 127
    1e0a:	57 e4       	ldi	r21, 0x47	; 71
    1e0c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e10:	18 16       	cp	r1, r24
    1e12:	4c f5       	brge	.+82     	; 0x1e66 <LCD_SendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e14:	69 8d       	ldd	r22, Y+25	; 0x19
    1e16:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e18:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	40 e2       	ldi	r20, 0x20	; 32
    1e22:	51 e4       	ldi	r21, 0x41	; 65
    1e24:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e28:	dc 01       	movw	r26, r24
    1e2a:	cb 01       	movw	r24, r22
    1e2c:	bc 01       	movw	r22, r24
    1e2e:	cd 01       	movw	r24, r26
    1e30:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e34:	dc 01       	movw	r26, r24
    1e36:	cb 01       	movw	r24, r22
    1e38:	9c 8b       	std	Y+20, r25	; 0x14
    1e3a:	8b 8b       	std	Y+19, r24	; 0x13
    1e3c:	0f c0       	rjmp	.+30     	; 0x1e5c <LCD_SendFallingEdge+0xd0>
    1e3e:	80 e9       	ldi	r24, 0x90	; 144
    1e40:	91 e0       	ldi	r25, 0x01	; 1
    1e42:	9a 8b       	std	Y+18, r25	; 0x12
    1e44:	89 8b       	std	Y+17, r24	; 0x11
    1e46:	89 89       	ldd	r24, Y+17	; 0x11
    1e48:	9a 89       	ldd	r25, Y+18	; 0x12
    1e4a:	01 97       	sbiw	r24, 0x01	; 1
    1e4c:	f1 f7       	brne	.-4      	; 0x1e4a <LCD_SendFallingEdge+0xbe>
    1e4e:	9a 8b       	std	Y+18, r25	; 0x12
    1e50:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e52:	8b 89       	ldd	r24, Y+19	; 0x13
    1e54:	9c 89       	ldd	r25, Y+20	; 0x14
    1e56:	01 97       	sbiw	r24, 0x01	; 1
    1e58:	9c 8b       	std	Y+20, r25	; 0x14
    1e5a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e60:	00 97       	sbiw	r24, 0x00	; 0
    1e62:	69 f7       	brne	.-38     	; 0x1e3e <LCD_SendFallingEdge+0xb2>
    1e64:	14 c0       	rjmp	.+40     	; 0x1e8e <LCD_SendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e66:	6d 89       	ldd	r22, Y+21	; 0x15
    1e68:	7e 89       	ldd	r23, Y+22	; 0x16
    1e6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e6e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	9c 8b       	std	Y+20, r25	; 0x14
    1e78:	8b 8b       	std	Y+19, r24	; 0x13
    1e7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e7e:	98 8b       	std	Y+16, r25	; 0x10
    1e80:	8f 87       	std	Y+15, r24	; 0x0f
    1e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e84:	98 89       	ldd	r25, Y+16	; 0x10
    1e86:	01 97       	sbiw	r24, 0x01	; 1
    1e88:	f1 f7       	brne	.-4      	; 0x1e86 <LCD_SendFallingEdge+0xfa>
    1e8a:	98 8b       	std	Y+16, r25	; 0x10
    1e8c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_setPinValue(LCD_CONTROL_PORT ,LCD_EN ,LOW);
    1e8e:	81 e0       	ldi	r24, 0x01	; 1
    1e90:	63 e0       	ldi	r22, 0x03	; 3
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	0e 94 aa 06 	call	0xd54	; 0xd54 <DIO_setPinValue>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	a0 e8       	ldi	r26, 0x80	; 128
    1e9e:	bf e3       	ldi	r27, 0x3F	; 63
    1ea0:	8b 87       	std	Y+11, r24	; 0x0b
    1ea2:	9c 87       	std	Y+12, r25	; 0x0c
    1ea4:	ad 87       	std	Y+13, r26	; 0x0d
    1ea6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eaa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	4a e7       	ldi	r20, 0x7A	; 122
    1eb6:	55 e4       	ldi	r21, 0x45	; 69
    1eb8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ebc:	dc 01       	movw	r26, r24
    1ebe:	cb 01       	movw	r24, r22
    1ec0:	8f 83       	std	Y+7, r24	; 0x07
    1ec2:	98 87       	std	Y+8, r25	; 0x08
    1ec4:	a9 87       	std	Y+9, r26	; 0x09
    1ec6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ec8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eca:	78 85       	ldd	r23, Y+8	; 0x08
    1ecc:	89 85       	ldd	r24, Y+9	; 0x09
    1ece:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e8       	ldi	r20, 0x80	; 128
    1ed6:	5f e3       	ldi	r21, 0x3F	; 63
    1ed8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1edc:	88 23       	and	r24, r24
    1ede:	2c f4       	brge	.+10     	; 0x1eea <LCD_SendFallingEdge+0x15e>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	3f c0       	rjmp	.+126    	; 0x1f68 <LCD_SendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    1eea:	6f 81       	ldd	r22, Y+7	; 0x07
    1eec:	78 85       	ldd	r23, Y+8	; 0x08
    1eee:	89 85       	ldd	r24, Y+9	; 0x09
    1ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	3f ef       	ldi	r19, 0xFF	; 255
    1ef6:	4f e7       	ldi	r20, 0x7F	; 127
    1ef8:	57 e4       	ldi	r21, 0x47	; 71
    1efa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1efe:	18 16       	cp	r1, r24
    1f00:	4c f5       	brge	.+82     	; 0x1f54 <LCD_SendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e2       	ldi	r20, 0x20	; 32
    1f10:	51 e4       	ldi	r21, 0x41	; 65
    1f12:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	9e 83       	std	Y+6, r25	; 0x06
    1f28:	8d 83       	std	Y+5, r24	; 0x05
    1f2a:	0f c0       	rjmp	.+30     	; 0x1f4a <LCD_SendFallingEdge+0x1be>
    1f2c:	80 e9       	ldi	r24, 0x90	; 144
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	9c 83       	std	Y+4, r25	; 0x04
    1f32:	8b 83       	std	Y+3, r24	; 0x03
    1f34:	8b 81       	ldd	r24, Y+3	; 0x03
    1f36:	9c 81       	ldd	r25, Y+4	; 0x04
    1f38:	01 97       	sbiw	r24, 0x01	; 1
    1f3a:	f1 f7       	brne	.-4      	; 0x1f38 <LCD_SendFallingEdge+0x1ac>
    1f3c:	9c 83       	std	Y+4, r25	; 0x04
    1f3e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f40:	8d 81       	ldd	r24, Y+5	; 0x05
    1f42:	9e 81       	ldd	r25, Y+6	; 0x06
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	9e 83       	std	Y+6, r25	; 0x06
    1f48:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	69 f7       	brne	.-38     	; 0x1f2c <LCD_SendFallingEdge+0x1a0>
    1f52:	14 c0       	rjmp	.+40     	; 0x1f7c <LCD_SendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f60:	dc 01       	movw	r26, r24
    1f62:	cb 01       	movw	r24, r22
    1f64:	9e 83       	std	Y+6, r25	; 0x06
    1f66:	8d 83       	std	Y+5, r24	; 0x05
    1f68:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f6c:	9a 83       	std	Y+2, r25	; 0x02
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	9a 81       	ldd	r25, Y+2	; 0x02
    1f74:	01 97       	sbiw	r24, 0x01	; 1
    1f76:	f1 f7       	brne	.-4      	; 0x1f74 <LCD_SendFallingEdge+0x1e8>
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1f7c:	6c 96       	adiw	r28, 0x1c	; 28
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <LCD_ClearScreen>:

void LCD_ClearScreen(void)
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	cd b7       	in	r28, 0x3d	; 61
    1f94:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(DISPLAY_CLEAR);
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_sendCommand>
}
    1f9c:	cf 91       	pop	r28
    1f9e:	df 91       	pop	r29
    1fa0:	08 95       	ret

00001fa2 <LCD_voidString>:

void LCD_voidString                (uint8 * copy_String)
{
    1fa2:	df 93       	push	r29
    1fa4:	cf 93       	push	r28
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <LCD_voidString+0x6>
    1fa8:	0f 92       	push	r0
    1faa:	cd b7       	in	r28, 0x3d	; 61
    1fac:	de b7       	in	r29, 0x3e	; 62
    1fae:	9b 83       	std	Y+3, r25	; 0x03
    1fb0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 stringIndex = 0;
    1fb2:	19 82       	std	Y+1, r1	; 0x01
    1fb4:	0e c0       	rjmp	.+28     	; 0x1fd2 <LCD_voidString+0x30>
	while(copy_String[stringIndex]!= '\0')
	{
		LCD_sendData(copy_String[stringIndex]);
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	e2 0f       	add	r30, r18
    1fc4:	f3 1f       	adc	r31, r19
    1fc6:	80 81       	ld	r24, Z
    1fc8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <LCD_sendData>
		stringIndex ++;
    1fcc:	89 81       	ldd	r24, Y+1	; 0x01
    1fce:	8f 5f       	subi	r24, 0xFF	; 255
    1fd0:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidString                (uint8 * copy_String)
{
	uint8 stringIndex = 0;
	while(copy_String[stringIndex]!= '\0')
    1fd2:	89 81       	ldd	r24, Y+1	; 0x01
    1fd4:	28 2f       	mov	r18, r24
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	9b 81       	ldd	r25, Y+3	; 0x03
    1fdc:	fc 01       	movw	r30, r24
    1fde:	e2 0f       	add	r30, r18
    1fe0:	f3 1f       	adc	r31, r19
    1fe2:	80 81       	ld	r24, Z
    1fe4:	88 23       	and	r24, r24
    1fe6:	39 f7       	brne	.-50     	; 0x1fb6 <LCD_voidString+0x14>
	{
		LCD_sendData(copy_String[stringIndex]);
		stringIndex ++;
	}
}
    1fe8:	0f 90       	pop	r0
    1fea:	0f 90       	pop	r0
    1fec:	0f 90       	pop	r0
    1fee:	cf 91       	pop	r28
    1ff0:	df 91       	pop	r29
    1ff2:	08 95       	ret

00001ff4 <LCD_voidSpace>:

void LCD_voidSpace                  (void                )
{
    1ff4:	df 93       	push	r29
    1ff6:	cf 93       	push	r28
    1ff8:	cd b7       	in	r28, 0x3d	; 61
    1ffa:	de b7       	in	r29, 0x3e	; 62
	LCD_sendData(' ');
    1ffc:	80 e2       	ldi	r24, 0x20	; 32
    1ffe:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <LCD_sendData>
}
    2002:	cf 91       	pop	r28
    2004:	df 91       	pop	r29
    2006:	08 95       	ret

00002008 <PORT_init>:
#include "PORT_interface.h"



void PORT_init(void)
{
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
	DDRA =PORTA_DIR;
    2010:	ea e3       	ldi	r30, 0x3A	; 58
    2012:	f0 e0       	ldi	r31, 0x00	; 0
    2014:	10 82       	st	Z, r1
	DDRB =PORTB_DIR;
    2016:	e7 e3       	ldi	r30, 0x37	; 55
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	10 82       	st	Z, r1
	DDRC =PORTC_DIR;
    201c:	e4 e3       	ldi	r30, 0x34	; 52
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	10 82       	st	Z, r1
	DDRD =PORTD_DIR;
    2022:	e1 e3       	ldi	r30, 0x31	; 49
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 ef       	ldi	r24, 0xF0	; 240
    2028:	80 83       	st	Z, r24

	PORTA =PORTA_VAL;
    202a:	eb e3       	ldi	r30, 0x3B	; 59
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	10 82       	st	Z, r1
	PORTB =PORTB_VAL;
    2030:	e8 e3       	ldi	r30, 0x38	; 56
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	10 82       	st	Z, r1
	PORTC =PORTC_VAL;
    2036:	e5 e3       	ldi	r30, 0x35	; 53
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	10 82       	st	Z, r1
	PORTD =PORTD_VAL;
    203c:	e2 e3       	ldi	r30, 0x32	; 50
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	8f ef       	ldi	r24, 0xFF	; 255
    2042:	80 83       	st	Z, r24

}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <main>:
#include "KYP_interface.h"
#include "LCD_interface.h"


int main(void)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	64 97       	sbiw	r28, 0x14	; 20
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
	uint32 num1=0;
    205e:	19 8a       	std	Y+17, r1	; 0x11
    2060:	1a 8a       	std	Y+18, r1	; 0x12
    2062:	1b 8a       	std	Y+19, r1	; 0x13
    2064:	1c 8a       	std	Y+20, r1	; 0x14
	uint32 num2=0;
    2066:	1d 86       	std	Y+13, r1	; 0x0d
    2068:	1e 86       	std	Y+14, r1	; 0x0e
    206a:	1f 86       	std	Y+15, r1	; 0x0f
    206c:	18 8a       	std	Y+16, r1	; 0x10
	uint32 operation=0;
    206e:	19 86       	std	Y+9, r1	; 0x09
    2070:	1a 86       	std	Y+10, r1	; 0x0a
    2072:	1b 86       	std	Y+11, r1	; 0x0b
    2074:	1c 86       	std	Y+12, r1	; 0x0c
	uint32 result=0;
    2076:	1d 82       	std	Y+5, r1	; 0x05
    2078:	1e 82       	std	Y+6, r1	; 0x06
    207a:	1f 82       	std	Y+7, r1	; 0x07
    207c:	18 86       	std	Y+8, r1	; 0x08
	uint32 value=0;
    207e:	19 82       	std	Y+1, r1	; 0x01
    2080:	1a 82       	std	Y+2, r1	; 0x02
    2082:	1b 82       	std	Y+3, r1	; 0x03
    2084:	1c 82       	std	Y+4, r1	; 0x04
	PORT_init();
    2086:	0e 94 04 10 	call	0x2008	; 0x2008 <PORT_init>
	LCD_voidinit();
    208a:	0e 94 33 0b 	call	0x1666	; 0x1666 <LCD_voidinit>
	while(1)
	{
		do
		{
			value=getPressed();
    208e:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <getPressed>
    2092:	88 2f       	mov	r24, r24
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	a0 e0       	ldi	r26, 0x00	; 0
    2098:	b0 e0       	ldi	r27, 0x00	; 0
    209a:	89 83       	std	Y+1, r24	; 0x01
    209c:	9a 83       	std	Y+2, r25	; 0x02
    209e:	ab 83       	std	Y+3, r26	; 0x03
    20a0:	bc 83       	std	Y+4, r27	; 0x04
		}while(value == 0xff);
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	9a 81       	ldd	r25, Y+2	; 0x02
    20a6:	ab 81       	ldd	r26, Y+3	; 0x03
    20a8:	bc 81       	ldd	r27, Y+4	; 0x04
    20aa:	8f 3f       	cpi	r24, 0xFF	; 255
    20ac:	91 05       	cpc	r25, r1
    20ae:	a1 05       	cpc	r26, r1
    20b0:	b1 05       	cpc	r27, r1
    20b2:	69 f3       	breq	.-38     	; 0x208e <main+0x44>
        if (value =='C')
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	9a 81       	ldd	r25, Y+2	; 0x02
    20b8:	ab 81       	ldd	r26, Y+3	; 0x03
    20ba:	bc 81       	ldd	r27, Y+4	; 0x04
    20bc:	83 34       	cpi	r24, 0x43	; 67
    20be:	91 05       	cpc	r25, r1
    20c0:	a1 05       	cpc	r26, r1
    20c2:	b1 05       	cpc	r27, r1
    20c4:	81 f4       	brne	.+32     	; 0x20e6 <main+0x9c>
        {
        	 LCD_sendCommand(0x01);
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <LCD_sendCommand>
        	     num1=0;
    20cc:	19 8a       	std	Y+17, r1	; 0x11
    20ce:	1a 8a       	std	Y+18, r1	; 0x12
    20d0:	1b 8a       	std	Y+19, r1	; 0x13
    20d2:	1c 8a       	std	Y+20, r1	; 0x14
        		 num2=0;
    20d4:	1d 86       	std	Y+13, r1	; 0x0d
    20d6:	1e 86       	std	Y+14, r1	; 0x0e
    20d8:	1f 86       	std	Y+15, r1	; 0x0f
    20da:	18 8a       	std	Y+16, r1	; 0x10
        		 operation=0;
    20dc:	19 86       	std	Y+9, r1	; 0x09
    20de:	1a 86       	std	Y+10, r1	; 0x0a
    20e0:	1b 86       	std	Y+11, r1	; 0x0b
    20e2:	1c 86       	std	Y+12, r1	; 0x0c
    20e4:	d4 cf       	rjmp	.-88     	; 0x208e <main+0x44>

        }
        else
        {
        	LCD_sendData(value);
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <LCD_sendData>
        	if(value!='+'&&value !='-'&&value !='*'&&value !='/'&&value!='=')
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	9a 81       	ldd	r25, Y+2	; 0x02
    20f0:	ab 81       	ldd	r26, Y+3	; 0x03
    20f2:	bc 81       	ldd	r27, Y+4	; 0x04
    20f4:	8b 32       	cpi	r24, 0x2B	; 43
    20f6:	91 05       	cpc	r25, r1
    20f8:	a1 05       	cpc	r26, r1
    20fa:	b1 05       	cpc	r27, r1
    20fc:	09 f4       	brne	.+2      	; 0x2100 <main+0xb6>
    20fe:	41 c0       	rjmp	.+130    	; 0x2182 <main+0x138>
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	9a 81       	ldd	r25, Y+2	; 0x02
    2104:	ab 81       	ldd	r26, Y+3	; 0x03
    2106:	bc 81       	ldd	r27, Y+4	; 0x04
    2108:	8d 32       	cpi	r24, 0x2D	; 45
    210a:	91 05       	cpc	r25, r1
    210c:	a1 05       	cpc	r26, r1
    210e:	b1 05       	cpc	r27, r1
    2110:	c1 f1       	breq	.+112    	; 0x2182 <main+0x138>
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	9a 81       	ldd	r25, Y+2	; 0x02
    2116:	ab 81       	ldd	r26, Y+3	; 0x03
    2118:	bc 81       	ldd	r27, Y+4	; 0x04
    211a:	8a 32       	cpi	r24, 0x2A	; 42
    211c:	91 05       	cpc	r25, r1
    211e:	a1 05       	cpc	r26, r1
    2120:	b1 05       	cpc	r27, r1
    2122:	79 f1       	breq	.+94     	; 0x2182 <main+0x138>
    2124:	89 81       	ldd	r24, Y+1	; 0x01
    2126:	9a 81       	ldd	r25, Y+2	; 0x02
    2128:	ab 81       	ldd	r26, Y+3	; 0x03
    212a:	bc 81       	ldd	r27, Y+4	; 0x04
    212c:	8f 32       	cpi	r24, 0x2F	; 47
    212e:	91 05       	cpc	r25, r1
    2130:	a1 05       	cpc	r26, r1
    2132:	b1 05       	cpc	r27, r1
    2134:	31 f1       	breq	.+76     	; 0x2182 <main+0x138>
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	9a 81       	ldd	r25, Y+2	; 0x02
    213a:	ab 81       	ldd	r26, Y+3	; 0x03
    213c:	bc 81       	ldd	r27, Y+4	; 0x04
    213e:	8d 33       	cpi	r24, 0x3D	; 61
    2140:	91 05       	cpc	r25, r1
    2142:	a1 05       	cpc	r26, r1
    2144:	b1 05       	cpc	r27, r1
    2146:	e9 f0       	breq	.+58     	; 0x2182 <main+0x138>
        	{
        		num1=(value -48)+num1*10;
    2148:	89 89       	ldd	r24, Y+17	; 0x11
    214a:	9a 89       	ldd	r25, Y+18	; 0x12
    214c:	ab 89       	ldd	r26, Y+19	; 0x13
    214e:	bc 89       	ldd	r27, Y+20	; 0x14
    2150:	2a e0       	ldi	r18, 0x0A	; 10
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e0       	ldi	r20, 0x00	; 0
    2156:	50 e0       	ldi	r21, 0x00	; 0
    2158:	bc 01       	movw	r22, r24
    215a:	cd 01       	movw	r24, r26
    215c:	0e 94 00 12 	call	0x2400	; 0x2400 <__mulsi3>
    2160:	9b 01       	movw	r18, r22
    2162:	ac 01       	movw	r20, r24
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	9a 81       	ldd	r25, Y+2	; 0x02
    2168:	ab 81       	ldd	r26, Y+3	; 0x03
    216a:	bc 81       	ldd	r27, Y+4	; 0x04
    216c:	82 0f       	add	r24, r18
    216e:	93 1f       	adc	r25, r19
    2170:	a4 1f       	adc	r26, r20
    2172:	b5 1f       	adc	r27, r21
    2174:	c0 97       	sbiw	r24, 0x30	; 48
    2176:	a1 09       	sbc	r26, r1
    2178:	b1 09       	sbc	r27, r1
    217a:	89 8b       	std	Y+17, r24	; 0x11
    217c:	9a 8b       	std	Y+18, r25	; 0x12
    217e:	ab 8b       	std	Y+19, r26	; 0x13
    2180:	bc 8b       	std	Y+20, r27	; 0x14
        	}
        	if(value=='+'||value =='-'||value =='*'||value =='/')
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	9a 81       	ldd	r25, Y+2	; 0x02
    2186:	ab 81       	ldd	r26, Y+3	; 0x03
    2188:	bc 81       	ldd	r27, Y+4	; 0x04
    218a:	8b 32       	cpi	r24, 0x2B	; 43
    218c:	91 05       	cpc	r25, r1
    218e:	a1 05       	cpc	r26, r1
    2190:	b1 05       	cpc	r27, r1
    2192:	d9 f0       	breq	.+54     	; 0x21ca <main+0x180>
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	ab 81       	ldd	r26, Y+3	; 0x03
    219a:	bc 81       	ldd	r27, Y+4	; 0x04
    219c:	8d 32       	cpi	r24, 0x2D	; 45
    219e:	91 05       	cpc	r25, r1
    21a0:	a1 05       	cpc	r26, r1
    21a2:	b1 05       	cpc	r27, r1
    21a4:	91 f0       	breq	.+36     	; 0x21ca <main+0x180>
    21a6:	89 81       	ldd	r24, Y+1	; 0x01
    21a8:	9a 81       	ldd	r25, Y+2	; 0x02
    21aa:	ab 81       	ldd	r26, Y+3	; 0x03
    21ac:	bc 81       	ldd	r27, Y+4	; 0x04
    21ae:	8a 32       	cpi	r24, 0x2A	; 42
    21b0:	91 05       	cpc	r25, r1
    21b2:	a1 05       	cpc	r26, r1
    21b4:	b1 05       	cpc	r27, r1
    21b6:	49 f0       	breq	.+18     	; 0x21ca <main+0x180>
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	9a 81       	ldd	r25, Y+2	; 0x02
    21bc:	ab 81       	ldd	r26, Y+3	; 0x03
    21be:	bc 81       	ldd	r27, Y+4	; 0x04
    21c0:	8f 32       	cpi	r24, 0x2F	; 47
    21c2:	91 05       	cpc	r25, r1
    21c4:	a1 05       	cpc	r26, r1
    21c6:	b1 05       	cpc	r27, r1
    21c8:	a1 f4       	brne	.+40     	; 0x21f2 <main+0x1a8>
        	{
        		num2=num1;
    21ca:	89 89       	ldd	r24, Y+17	; 0x11
    21cc:	9a 89       	ldd	r25, Y+18	; 0x12
    21ce:	ab 89       	ldd	r26, Y+19	; 0x13
    21d0:	bc 89       	ldd	r27, Y+20	; 0x14
    21d2:	8d 87       	std	Y+13, r24	; 0x0d
    21d4:	9e 87       	std	Y+14, r25	; 0x0e
    21d6:	af 87       	std	Y+15, r26	; 0x0f
    21d8:	b8 8b       	std	Y+16, r27	; 0x10
        		num1=0;
    21da:	19 8a       	std	Y+17, r1	; 0x11
    21dc:	1a 8a       	std	Y+18, r1	; 0x12
    21de:	1b 8a       	std	Y+19, r1	; 0x13
    21e0:	1c 8a       	std	Y+20, r1	; 0x14
        		operation =value;
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	ab 81       	ldd	r26, Y+3	; 0x03
    21e8:	bc 81       	ldd	r27, Y+4	; 0x04
    21ea:	89 87       	std	Y+9, r24	; 0x09
    21ec:	9a 87       	std	Y+10, r25	; 0x0a
    21ee:	ab 87       	std	Y+11, r26	; 0x0b
    21f0:	bc 87       	std	Y+12, r27	; 0x0c

        	}
        	if(value =='=')
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	9a 81       	ldd	r25, Y+2	; 0x02
    21f6:	ab 81       	ldd	r26, Y+3	; 0x03
    21f8:	bc 81       	ldd	r27, Y+4	; 0x04
    21fa:	8d 33       	cpi	r24, 0x3D	; 61
    21fc:	91 05       	cpc	r25, r1
    21fe:	a1 05       	cpc	r26, r1
    2200:	b1 05       	cpc	r27, r1
    2202:	09 f0       	breq	.+2      	; 0x2206 <main+0x1bc>
    2204:	44 cf       	rjmp	.-376    	; 0x208e <main+0x44>
        	{
        		if(operation=='+')
    2206:	89 85       	ldd	r24, Y+9	; 0x09
    2208:	9a 85       	ldd	r25, Y+10	; 0x0a
    220a:	ab 85       	ldd	r26, Y+11	; 0x0b
    220c:	bc 85       	ldd	r27, Y+12	; 0x0c
    220e:	8b 32       	cpi	r24, 0x2B	; 43
    2210:	91 05       	cpc	r25, r1
    2212:	a1 05       	cpc	r26, r1
    2214:	b1 05       	cpc	r27, r1
    2216:	89 f4       	brne	.+34     	; 0x223a <main+0x1f0>
        		{
        			result=num1+num2;
    2218:	89 89       	ldd	r24, Y+17	; 0x11
    221a:	9a 89       	ldd	r25, Y+18	; 0x12
    221c:	ab 89       	ldd	r26, Y+19	; 0x13
    221e:	bc 89       	ldd	r27, Y+20	; 0x14
    2220:	2d 85       	ldd	r18, Y+13	; 0x0d
    2222:	3e 85       	ldd	r19, Y+14	; 0x0e
    2224:	4f 85       	ldd	r20, Y+15	; 0x0f
    2226:	58 89       	ldd	r21, Y+16	; 0x10
    2228:	82 0f       	add	r24, r18
    222a:	93 1f       	adc	r25, r19
    222c:	a4 1f       	adc	r26, r20
    222e:	b5 1f       	adc	r27, r21
    2230:	8d 83       	std	Y+5, r24	; 0x05
    2232:	9e 83       	std	Y+6, r25	; 0x06
    2234:	af 83       	std	Y+7, r26	; 0x07
    2236:	b8 87       	std	Y+8, r27	; 0x08
    2238:	5a c0       	rjmp	.+180    	; 0x22ee <main+0x2a4>
        		}
        		else if(operation=='-')
    223a:	89 85       	ldd	r24, Y+9	; 0x09
    223c:	9a 85       	ldd	r25, Y+10	; 0x0a
    223e:	ab 85       	ldd	r26, Y+11	; 0x0b
    2240:	bc 85       	ldd	r27, Y+12	; 0x0c
    2242:	8d 32       	cpi	r24, 0x2D	; 45
    2244:	91 05       	cpc	r25, r1
    2246:	a1 05       	cpc	r26, r1
    2248:	b1 05       	cpc	r27, r1
    224a:	89 f4       	brne	.+34     	; 0x226e <main+0x224>
				{
					result=num2-num1;
    224c:	8d 85       	ldd	r24, Y+13	; 0x0d
    224e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2250:	af 85       	ldd	r26, Y+15	; 0x0f
    2252:	b8 89       	ldd	r27, Y+16	; 0x10
    2254:	29 89       	ldd	r18, Y+17	; 0x11
    2256:	3a 89       	ldd	r19, Y+18	; 0x12
    2258:	4b 89       	ldd	r20, Y+19	; 0x13
    225a:	5c 89       	ldd	r21, Y+20	; 0x14
    225c:	82 1b       	sub	r24, r18
    225e:	93 0b       	sbc	r25, r19
    2260:	a4 0b       	sbc	r26, r20
    2262:	b5 0b       	sbc	r27, r21
    2264:	8d 83       	std	Y+5, r24	; 0x05
    2266:	9e 83       	std	Y+6, r25	; 0x06
    2268:	af 83       	std	Y+7, r26	; 0x07
    226a:	b8 87       	std	Y+8, r27	; 0x08
    226c:	40 c0       	rjmp	.+128    	; 0x22ee <main+0x2a4>
				}
        		else if(operation=='*')
    226e:	89 85       	ldd	r24, Y+9	; 0x09
    2270:	9a 85       	ldd	r25, Y+10	; 0x0a
    2272:	ab 85       	ldd	r26, Y+11	; 0x0b
    2274:	bc 85       	ldd	r27, Y+12	; 0x0c
    2276:	8a 32       	cpi	r24, 0x2A	; 42
    2278:	91 05       	cpc	r25, r1
    227a:	a1 05       	cpc	r26, r1
    227c:	b1 05       	cpc	r27, r1
    227e:	99 f4       	brne	.+38     	; 0x22a6 <main+0x25c>
				{
					result=num1*num2;
    2280:	89 89       	ldd	r24, Y+17	; 0x11
    2282:	9a 89       	ldd	r25, Y+18	; 0x12
    2284:	ab 89       	ldd	r26, Y+19	; 0x13
    2286:	bc 89       	ldd	r27, Y+20	; 0x14
    2288:	2d 85       	ldd	r18, Y+13	; 0x0d
    228a:	3e 85       	ldd	r19, Y+14	; 0x0e
    228c:	4f 85       	ldd	r20, Y+15	; 0x0f
    228e:	58 89       	ldd	r21, Y+16	; 0x10
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 00 12 	call	0x2400	; 0x2400 <__mulsi3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	8d 83       	std	Y+5, r24	; 0x05
    229e:	9e 83       	std	Y+6, r25	; 0x06
    22a0:	af 83       	std	Y+7, r26	; 0x07
    22a2:	b8 87       	std	Y+8, r27	; 0x08
    22a4:	24 c0       	rjmp	.+72     	; 0x22ee <main+0x2a4>
				}
        		else if(operation=='/')
    22a6:	89 85       	ldd	r24, Y+9	; 0x09
    22a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22aa:	ab 85       	ldd	r26, Y+11	; 0x0b
    22ac:	bc 85       	ldd	r27, Y+12	; 0x0c
    22ae:	8f 32       	cpi	r24, 0x2F	; 47
    22b0:	91 05       	cpc	r25, r1
    22b2:	a1 05       	cpc	r26, r1
    22b4:	b1 05       	cpc	r27, r1
    22b6:	99 f4       	brne	.+38     	; 0x22de <main+0x294>
				{
					result=num2/num1;
    22b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    22bc:	af 85       	ldd	r26, Y+15	; 0x0f
    22be:	b8 89       	ldd	r27, Y+16	; 0x10
    22c0:	29 89       	ldd	r18, Y+17	; 0x11
    22c2:	3a 89       	ldd	r19, Y+18	; 0x12
    22c4:	4b 89       	ldd	r20, Y+19	; 0x13
    22c6:	5c 89       	ldd	r21, Y+20	; 0x14
    22c8:	bc 01       	movw	r22, r24
    22ca:	cd 01       	movw	r24, r26
    22cc:	0e 94 1f 12 	call	0x243e	; 0x243e <__udivmodsi4>
    22d0:	da 01       	movw	r26, r20
    22d2:	c9 01       	movw	r24, r18
    22d4:	8d 83       	std	Y+5, r24	; 0x05
    22d6:	9e 83       	std	Y+6, r25	; 0x06
    22d8:	af 83       	std	Y+7, r26	; 0x07
    22da:	b8 87       	std	Y+8, r27	; 0x08
    22dc:	08 c0       	rjmp	.+16     	; 0x22ee <main+0x2a4>
				}
        		else
        		{
        			result= 'E';
    22de:	85 e4       	ldi	r24, 0x45	; 69
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 e0       	ldi	r26, 0x00	; 0
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	8d 83       	std	Y+5, r24	; 0x05
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	af 83       	std	Y+7, r26	; 0x07
    22ec:	b8 87       	std	Y+8, r27	; 0x08
        		}
        		if(result<10)
    22ee:	8d 81       	ldd	r24, Y+5	; 0x05
    22f0:	9e 81       	ldd	r25, Y+6	; 0x06
    22f2:	af 81       	ldd	r26, Y+7	; 0x07
    22f4:	b8 85       	ldd	r27, Y+8	; 0x08
    22f6:	8a 30       	cpi	r24, 0x0A	; 10
    22f8:	91 05       	cpc	r25, r1
    22fa:	a1 05       	cpc	r26, r1
    22fc:	b1 05       	cpc	r27, r1
    22fe:	28 f4       	brcc	.+10     	; 0x230a <main+0x2c0>
        		{
        			LCD_sendData(result+48);
    2300:	8d 81       	ldd	r24, Y+5	; 0x05
    2302:	80 5d       	subi	r24, 0xD0	; 208
    2304:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <LCD_sendData>
    2308:	c2 ce       	rjmp	.-636    	; 0x208e <main+0x44>
        		}
        		else if(result<100)
    230a:	8d 81       	ldd	r24, Y+5	; 0x05
    230c:	9e 81       	ldd	r25, Y+6	; 0x06
    230e:	af 81       	ldd	r26, Y+7	; 0x07
    2310:	b8 85       	ldd	r27, Y+8	; 0x08
    2312:	84 36       	cpi	r24, 0x64	; 100
    2314:	91 05       	cpc	r25, r1
    2316:	a1 05       	cpc	r26, r1
    2318:	b1 05       	cpc	r27, r1
    231a:	18 f5       	brcc	.+70     	; 0x2362 <main+0x318>
        		{
        			LCD_sendData(result/10+48);
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	af 81       	ldd	r26, Y+7	; 0x07
    2322:	b8 85       	ldd	r27, Y+8	; 0x08
    2324:	2a e0       	ldi	r18, 0x0A	; 10
    2326:	30 e0       	ldi	r19, 0x00	; 0
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	50 e0       	ldi	r21, 0x00	; 0
    232c:	bc 01       	movw	r22, r24
    232e:	cd 01       	movw	r24, r26
    2330:	0e 94 1f 12 	call	0x243e	; 0x243e <__udivmodsi4>
    2334:	da 01       	movw	r26, r20
    2336:	c9 01       	movw	r24, r18
    2338:	80 5d       	subi	r24, 0xD0	; 208
    233a:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <LCD_sendData>
        			LCD_sendData(result%10+48);
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	af 81       	ldd	r26, Y+7	; 0x07
    2344:	b8 85       	ldd	r27, Y+8	; 0x08
    2346:	2a e0       	ldi	r18, 0x0A	; 10
    2348:	30 e0       	ldi	r19, 0x00	; 0
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	50 e0       	ldi	r21, 0x00	; 0
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	0e 94 1f 12 	call	0x243e	; 0x243e <__udivmodsi4>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	80 5d       	subi	r24, 0xD0	; 208
    235c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <LCD_sendData>
    2360:	96 ce       	rjmp	.-724    	; 0x208e <main+0x44>
        		}
        		else if(result<1000)
    2362:	8d 81       	ldd	r24, Y+5	; 0x05
    2364:	9e 81       	ldd	r25, Y+6	; 0x06
    2366:	af 81       	ldd	r26, Y+7	; 0x07
    2368:	b8 85       	ldd	r27, Y+8	; 0x08
    236a:	88 3e       	cpi	r24, 0xE8	; 232
    236c:	23 e0       	ldi	r18, 0x03	; 3
    236e:	92 07       	cpc	r25, r18
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	a2 07       	cpc	r26, r18
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	b2 07       	cpc	r27, r18
    2378:	f0 f5       	brcc	.+124    	; 0x23f6 <main+0x3ac>
        		{
        			LCD_sendData(result/100+48);
    237a:	8d 81       	ldd	r24, Y+5	; 0x05
    237c:	9e 81       	ldd	r25, Y+6	; 0x06
    237e:	af 81       	ldd	r26, Y+7	; 0x07
    2380:	b8 85       	ldd	r27, Y+8	; 0x08
    2382:	24 e6       	ldi	r18, 0x64	; 100
    2384:	30 e0       	ldi	r19, 0x00	; 0
    2386:	40 e0       	ldi	r20, 0x00	; 0
    2388:	50 e0       	ldi	r21, 0x00	; 0
    238a:	bc 01       	movw	r22, r24
    238c:	cd 01       	movw	r24, r26
    238e:	0e 94 1f 12 	call	0x243e	; 0x243e <__udivmodsi4>
    2392:	da 01       	movw	r26, r20
    2394:	c9 01       	movw	r24, r18
    2396:	80 5d       	subi	r24, 0xD0	; 208
    2398:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <LCD_sendData>
        			LCD_sendData((result%100)/10+48);
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	af 81       	ldd	r26, Y+7	; 0x07
    23a2:	b8 85       	ldd	r27, Y+8	; 0x08
    23a4:	24 e6       	ldi	r18, 0x64	; 100
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e0       	ldi	r20, 0x00	; 0
    23aa:	50 e0       	ldi	r21, 0x00	; 0
    23ac:	bc 01       	movw	r22, r24
    23ae:	cd 01       	movw	r24, r26
    23b0:	0e 94 1f 12 	call	0x243e	; 0x243e <__udivmodsi4>
    23b4:	dc 01       	movw	r26, r24
    23b6:	cb 01       	movw	r24, r22
    23b8:	2a e0       	ldi	r18, 0x0A	; 10
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	50 e0       	ldi	r21, 0x00	; 0
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 1f 12 	call	0x243e	; 0x243e <__udivmodsi4>
    23c8:	da 01       	movw	r26, r20
    23ca:	c9 01       	movw	r24, r18
    23cc:	80 5d       	subi	r24, 0xD0	; 208
    23ce:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <LCD_sendData>
        			LCD_sendData(result%10+48);
    23d2:	8d 81       	ldd	r24, Y+5	; 0x05
    23d4:	9e 81       	ldd	r25, Y+6	; 0x06
    23d6:	af 81       	ldd	r26, Y+7	; 0x07
    23d8:	b8 85       	ldd	r27, Y+8	; 0x08
    23da:	2a e0       	ldi	r18, 0x0A	; 10
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e0       	ldi	r20, 0x00	; 0
    23e0:	50 e0       	ldi	r21, 0x00	; 0
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 1f 12 	call	0x243e	; 0x243e <__udivmodsi4>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	80 5d       	subi	r24, 0xD0	; 208
    23f0:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <LCD_sendData>
    23f4:	4c ce       	rjmp	.-872    	; 0x208e <main+0x44>
        		}
        		else
        		{
        			LCD_voidString("ERROR");
    23f6:	80 e6       	ldi	r24, 0x60	; 96
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_voidString>
    23fe:	47 ce       	rjmp	.-882    	; 0x208e <main+0x44>

00002400 <__mulsi3>:
    2400:	62 9f       	mul	r22, r18
    2402:	d0 01       	movw	r26, r0
    2404:	73 9f       	mul	r23, r19
    2406:	f0 01       	movw	r30, r0
    2408:	82 9f       	mul	r24, r18
    240a:	e0 0d       	add	r30, r0
    240c:	f1 1d       	adc	r31, r1
    240e:	64 9f       	mul	r22, r20
    2410:	e0 0d       	add	r30, r0
    2412:	f1 1d       	adc	r31, r1
    2414:	92 9f       	mul	r25, r18
    2416:	f0 0d       	add	r31, r0
    2418:	83 9f       	mul	r24, r19
    241a:	f0 0d       	add	r31, r0
    241c:	74 9f       	mul	r23, r20
    241e:	f0 0d       	add	r31, r0
    2420:	65 9f       	mul	r22, r21
    2422:	f0 0d       	add	r31, r0
    2424:	99 27       	eor	r25, r25
    2426:	72 9f       	mul	r23, r18
    2428:	b0 0d       	add	r27, r0
    242a:	e1 1d       	adc	r30, r1
    242c:	f9 1f       	adc	r31, r25
    242e:	63 9f       	mul	r22, r19
    2430:	b0 0d       	add	r27, r0
    2432:	e1 1d       	adc	r30, r1
    2434:	f9 1f       	adc	r31, r25
    2436:	bd 01       	movw	r22, r26
    2438:	cf 01       	movw	r24, r30
    243a:	11 24       	eor	r1, r1
    243c:	08 95       	ret

0000243e <__udivmodsi4>:
    243e:	a1 e2       	ldi	r26, 0x21	; 33
    2440:	1a 2e       	mov	r1, r26
    2442:	aa 1b       	sub	r26, r26
    2444:	bb 1b       	sub	r27, r27
    2446:	fd 01       	movw	r30, r26
    2448:	0d c0       	rjmp	.+26     	; 0x2464 <__udivmodsi4_ep>

0000244a <__udivmodsi4_loop>:
    244a:	aa 1f       	adc	r26, r26
    244c:	bb 1f       	adc	r27, r27
    244e:	ee 1f       	adc	r30, r30
    2450:	ff 1f       	adc	r31, r31
    2452:	a2 17       	cp	r26, r18
    2454:	b3 07       	cpc	r27, r19
    2456:	e4 07       	cpc	r30, r20
    2458:	f5 07       	cpc	r31, r21
    245a:	20 f0       	brcs	.+8      	; 0x2464 <__udivmodsi4_ep>
    245c:	a2 1b       	sub	r26, r18
    245e:	b3 0b       	sbc	r27, r19
    2460:	e4 0b       	sbc	r30, r20
    2462:	f5 0b       	sbc	r31, r21

00002464 <__udivmodsi4_ep>:
    2464:	66 1f       	adc	r22, r22
    2466:	77 1f       	adc	r23, r23
    2468:	88 1f       	adc	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	1a 94       	dec	r1
    246e:	69 f7       	brne	.-38     	; 0x244a <__udivmodsi4_loop>
    2470:	60 95       	com	r22
    2472:	70 95       	com	r23
    2474:	80 95       	com	r24
    2476:	90 95       	com	r25
    2478:	9b 01       	movw	r18, r22
    247a:	ac 01       	movw	r20, r24
    247c:	bd 01       	movw	r22, r26
    247e:	cf 01       	movw	r24, r30
    2480:	08 95       	ret

00002482 <__prologue_saves__>:
    2482:	2f 92       	push	r2
    2484:	3f 92       	push	r3
    2486:	4f 92       	push	r4
    2488:	5f 92       	push	r5
    248a:	6f 92       	push	r6
    248c:	7f 92       	push	r7
    248e:	8f 92       	push	r8
    2490:	9f 92       	push	r9
    2492:	af 92       	push	r10
    2494:	bf 92       	push	r11
    2496:	cf 92       	push	r12
    2498:	df 92       	push	r13
    249a:	ef 92       	push	r14
    249c:	ff 92       	push	r15
    249e:	0f 93       	push	r16
    24a0:	1f 93       	push	r17
    24a2:	cf 93       	push	r28
    24a4:	df 93       	push	r29
    24a6:	cd b7       	in	r28, 0x3d	; 61
    24a8:	de b7       	in	r29, 0x3e	; 62
    24aa:	ca 1b       	sub	r28, r26
    24ac:	db 0b       	sbc	r29, r27
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
    24b8:	09 94       	ijmp

000024ba <__epilogue_restores__>:
    24ba:	2a 88       	ldd	r2, Y+18	; 0x12
    24bc:	39 88       	ldd	r3, Y+17	; 0x11
    24be:	48 88       	ldd	r4, Y+16	; 0x10
    24c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    24c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    24c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    24c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    24c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    24cc:	b9 84       	ldd	r11, Y+9	; 0x09
    24ce:	c8 84       	ldd	r12, Y+8	; 0x08
    24d0:	df 80       	ldd	r13, Y+7	; 0x07
    24d2:	ee 80       	ldd	r14, Y+6	; 0x06
    24d4:	fd 80       	ldd	r15, Y+5	; 0x05
    24d6:	0c 81       	ldd	r16, Y+4	; 0x04
    24d8:	1b 81       	ldd	r17, Y+3	; 0x03
    24da:	aa 81       	ldd	r26, Y+2	; 0x02
    24dc:	b9 81       	ldd	r27, Y+1	; 0x01
    24de:	ce 0f       	add	r28, r30
    24e0:	d1 1d       	adc	r29, r1
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	ed 01       	movw	r28, r26
    24ee:	08 95       	ret

000024f0 <_exit>:
    24f0:	f8 94       	cli

000024f2 <__stop_program>:
    24f2:	ff cf       	rjmp	.-2      	; 0x24f2 <__stop_program>
